// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snakes.proto

package lab4.snakes;

public final class SnakesProto {
  private SnakesProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code lab4.snakes.NodeRole}
   *
   * <pre>
   * Роль узла в топологии связей узлов в пределах игры
   * </pre>
   */
  public enum NodeRole
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NORMAL = 0;</code>
     *
     * <pre>
     * Обычный узел, лист в топологии "звезда"
     * </pre>
     */
    NORMAL(0, 0),
    /**
     * <code>MASTER = 1;</code>
     *
     * <pre>
     * Главный узел, центр в топологии "звезда"
     * </pre>
     */
    MASTER(1, 1),
    /**
     * <code>DEPUTY = 2;</code>
     *
     * <pre>
     * Заместитель главного узла
     * </pre>
     */
    DEPUTY(2, 2),
    /**
     * <code>VIEWER = 3;</code>
     *
     * <pre>
     * Наблюдатель, похож на NORMAL, но не имеет змеи в статусе ALIVE, только получает обновления статуса
     * </pre>
     */
    VIEWER(3, 3),
    ;

    /**
     * <code>NORMAL = 0;</code>
     *
     * <pre>
     * Обычный узел, лист в топологии "звезда"
     * </pre>
     */
    public static final int NORMAL_VALUE = 0;
    /**
     * <code>MASTER = 1;</code>
     *
     * <pre>
     * Главный узел, центр в топологии "звезда"
     * </pre>
     */
    public static final int MASTER_VALUE = 1;
    /**
     * <code>DEPUTY = 2;</code>
     *
     * <pre>
     * Заместитель главного узла
     * </pre>
     */
    public static final int DEPUTY_VALUE = 2;
    /**
     * <code>VIEWER = 3;</code>
     *
     * <pre>
     * Наблюдатель, похож на NORMAL, но не имеет змеи в статусе ALIVE, только получает обновления статуса
     * </pre>
     */
    public static final int VIEWER_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    public static NodeRole valueOf(int value) {
      switch (value) {
        case 0: return NORMAL;
        case 1: return MASTER;
        case 2: return DEPUTY;
        case 3: return VIEWER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<NodeRole>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        NodeRole> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<NodeRole>() {
            public NodeRole findValueByNumber(int number) {
              return NodeRole.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return lab4.snakes.SnakesProto.getDescriptor().getEnumTypes().get(0);
    }

    private static final NodeRole[] VALUES = values();

    public static NodeRole valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private NodeRole(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:lab4.snakes.NodeRole)
  }

  /**
   * Protobuf enum {@code lab4.snakes.PlayerType}
   *
   * <pre>
   * Тип игрока
   * </pre>
   */
  public enum PlayerType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>HUMAN = 0;</code>
     *
     * <pre>
     * Живой пользователь
     * </pre>
     */
    HUMAN(0, 0),
    /**
     * <code>ROBOT = 1;</code>
     *
     * <pre>
     * Робот, управляет своей змеёй с помощью алгоритма (вне задачи, для желающих)
     * </pre>
     */
    ROBOT(1, 1),
    ;

    /**
     * <code>HUMAN = 0;</code>
     *
     * <pre>
     * Живой пользователь
     * </pre>
     */
    public static final int HUMAN_VALUE = 0;
    /**
     * <code>ROBOT = 1;</code>
     *
     * <pre>
     * Робот, управляет своей змеёй с помощью алгоритма (вне задачи, для желающих)
     * </pre>
     */
    public static final int ROBOT_VALUE = 1;


    public final int getNumber() {
      return value;
    }

    public static PlayerType valueOf(int value) {
      switch (value) {
        case 0: return HUMAN;
        case 1: return ROBOT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PlayerType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PlayerType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PlayerType>() {
            public PlayerType findValueByNumber(int number) {
              return PlayerType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return lab4.snakes.SnakesProto.getDescriptor().getEnumTypes().get(1);
    }

    private static final PlayerType[] VALUES = values();

    public static PlayerType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private PlayerType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:lab4.snakes.PlayerType)
  }

  /**
   * Protobuf enum {@code lab4.snakes.Direction}
   */
  public enum Direction
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UP = 1;</code>
     *
     * <pre>
     * Вверх (в отрицательном направлении оси y)
     * </pre>
     */
    UP(0, 1),
    /**
     * <code>DOWN = 2;</code>
     *
     * <pre>
     * Вниз (в положительном направлении оси y)
     * </pre>
     */
    DOWN(1, 2),
    /**
     * <code>LEFT = 3;</code>
     *
     * <pre>
     * Влево (в отрицательном направлении оси x)
     * </pre>
     */
    LEFT(2, 3),
    /**
     * <code>RIGHT = 4;</code>
     *
     * <pre>
     * Вправо (в положительном направлении оси x)
     * </pre>
     */
    RIGHT(3, 4),
    ;

    /**
     * <code>UP = 1;</code>
     *
     * <pre>
     * Вверх (в отрицательном направлении оси y)
     * </pre>
     */
    public static final int UP_VALUE = 1;
    /**
     * <code>DOWN = 2;</code>
     *
     * <pre>
     * Вниз (в положительном направлении оси y)
     * </pre>
     */
    public static final int DOWN_VALUE = 2;
    /**
     * <code>LEFT = 3;</code>
     *
     * <pre>
     * Влево (в отрицательном направлении оси x)
     * </pre>
     */
    public static final int LEFT_VALUE = 3;
    /**
     * <code>RIGHT = 4;</code>
     *
     * <pre>
     * Вправо (в положительном направлении оси x)
     * </pre>
     */
    public static final int RIGHT_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    public static Direction valueOf(int value) {
      switch (value) {
        case 1: return UP;
        case 2: return DOWN;
        case 3: return LEFT;
        case 4: return RIGHT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Direction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Direction> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Direction>() {
            public Direction findValueByNumber(int number) {
              return Direction.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return lab4.snakes.SnakesProto.getDescriptor().getEnumTypes().get(2);
    }

    private static final Direction[] VALUES = values();

    public static Direction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Direction(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:lab4.snakes.Direction)
  }

  public interface GamePlayerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lab4.snakes.GamePlayer)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string name = 1;</code>
     *
     * <pre>
     * Имя игрока (для отображения в интерфейсе)
     * </pre>
     */
    boolean hasName();
    /**
     * <code>required string name = 1;</code>
     *
     * <pre>
     * Имя игрока (для отображения в интерфейсе)
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 1;</code>
     *
     * <pre>
     * Имя игрока (для отображения в интерфейсе)
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>required int32 id = 2;</code>
     *
     * <pre>
     * Уникальный идентификатор игрока в пределах игры
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required int32 id = 2;</code>
     *
     * <pre>
     * Уникальный идентификатор игрока в пределах игры
     * </pre>
     */
    int getId();

    /**
     * <code>required string ip_address = 3;</code>
     *
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
     * </pre>
     */
    boolean hasIpAddress();
    /**
     * <code>required string ip_address = 3;</code>
     *
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
     * </pre>
     */
    java.lang.String getIpAddress();
    /**
     * <code>required string ip_address = 3;</code>
     *
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
     * </pre>
     */
    com.google.protobuf.ByteString
        getIpAddressBytes();

    /**
     * <code>required int32 port = 4;</code>
     *
     * <pre>
     * Порт UDP-сокета игрока
     * </pre>
     */
    boolean hasPort();
    /**
     * <code>required int32 port = 4;</code>
     *
     * <pre>
     * Порт UDP-сокета игрока
     * </pre>
     */
    int getPort();

    /**
     * <code>required .lab4.snakes.NodeRole role = 5;</code>
     *
     * <pre>
     * Роль узла в топологии
     * </pre>
     */
    boolean hasRole();
    /**
     * <code>required .lab4.snakes.NodeRole role = 5;</code>
     *
     * <pre>
     * Роль узла в топологии
     * </pre>
     */
    lab4.snakes.SnakesProto.NodeRole getRole();

    /**
     * <code>optional .lab4.snakes.PlayerType type = 6 [default = HUMAN];</code>
     *
     * <pre>
     * Тип игрока
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional .lab4.snakes.PlayerType type = 6 [default = HUMAN];</code>
     *
     * <pre>
     * Тип игрока
     * </pre>
     */
    lab4.snakes.SnakesProto.PlayerType getType();

    /**
     * <code>required int32 score = 7;</code>
     *
     * <pre>
     * Число очков, которые набрал игрок
     * </pre>
     */
    boolean hasScore();
    /**
     * <code>required int32 score = 7;</code>
     *
     * <pre>
     * Число очков, которые набрал игрок
     * </pre>
     */
    int getScore();
  }
  /**
   * Protobuf type {@code lab4.snakes.GamePlayer}
   *
   * <pre>
   * Игрок
   * </pre>
   */
  public  static final class GamePlayer extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:lab4.snakes.GamePlayer)
      GamePlayerOrBuilder {
    // Use GamePlayer.newBuilder() to construct.
    private GamePlayer(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private GamePlayer() {
      name_ = "";
      id_ = 0;
      ipAddress_ = "";
      port_ = 0;
      role_ = 0;
      type_ = 0;
      score_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GamePlayer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              id_ = input.readInt32();
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              ipAddress_ = bs;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              port_ = input.readInt32();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              lab4.snakes.SnakesProto.NodeRole value = lab4.snakes.SnakesProto.NodeRole.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                role_ = rawValue;
              }
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              lab4.snakes.SnakesProto.PlayerType value = lab4.snakes.SnakesProto.PlayerType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                type_ = rawValue;
              }
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              score_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GamePlayer_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GamePlayer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              lab4.snakes.SnakesProto.GamePlayer.class, lab4.snakes.SnakesProto.GamePlayer.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <code>required string name = 1;</code>
     *
     * <pre>
     * Имя игрока (для отображения в интерфейсе)
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string name = 1;</code>
     *
     * <pre>
     * Имя игрока (для отображения в интерфейсе)
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 1;</code>
     *
     * <pre>
     * Имя игрока (для отображения в интерфейсе)
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ID_FIELD_NUMBER = 2;
    private int id_;
    /**
     * <code>required int32 id = 2;</code>
     *
     * <pre>
     * Уникальный идентификатор игрока в пределах игры
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 id = 2;</code>
     *
     * <pre>
     * Уникальный идентификатор игрока в пределах игры
     * </pre>
     */
    public int getId() {
      return id_;
    }

    public static final int IP_ADDRESS_FIELD_NUMBER = 3;
    private volatile java.lang.Object ipAddress_;
    /**
     * <code>required string ip_address = 3;</code>
     *
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
     * </pre>
     */
    public boolean hasIpAddress() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required string ip_address = 3;</code>
     *
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
     * </pre>
     */
    public java.lang.String getIpAddress() {
      java.lang.Object ref = ipAddress_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ipAddress_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string ip_address = 3;</code>
     *
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIpAddressBytes() {
      java.lang.Object ref = ipAddress_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ipAddress_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PORT_FIELD_NUMBER = 4;
    private int port_;
    /**
     * <code>required int32 port = 4;</code>
     *
     * <pre>
     * Порт UDP-сокета игрока
     * </pre>
     */
    public boolean hasPort() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 port = 4;</code>
     *
     * <pre>
     * Порт UDP-сокета игрока
     * </pre>
     */
    public int getPort() {
      return port_;
    }

    public static final int ROLE_FIELD_NUMBER = 5;
    private int role_;
    /**
     * <code>required .lab4.snakes.NodeRole role = 5;</code>
     *
     * <pre>
     * Роль узла в топологии
     * </pre>
     */
    public boolean hasRole() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required .lab4.snakes.NodeRole role = 5;</code>
     *
     * <pre>
     * Роль узла в топологии
     * </pre>
     */
    public lab4.snakes.SnakesProto.NodeRole getRole() {
      lab4.snakes.SnakesProto.NodeRole result = lab4.snakes.SnakesProto.NodeRole.valueOf(role_);
      return result == null ? lab4.snakes.SnakesProto.NodeRole.NORMAL : result;
    }

    public static final int TYPE_FIELD_NUMBER = 6;
    private int type_;
    /**
     * <code>optional .lab4.snakes.PlayerType type = 6 [default = HUMAN];</code>
     *
     * <pre>
     * Тип игрока
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .lab4.snakes.PlayerType type = 6 [default = HUMAN];</code>
     *
     * <pre>
     * Тип игрока
     * </pre>
     */
    public lab4.snakes.SnakesProto.PlayerType getType() {
      lab4.snakes.SnakesProto.PlayerType result = lab4.snakes.SnakesProto.PlayerType.valueOf(type_);
      return result == null ? lab4.snakes.SnakesProto.PlayerType.HUMAN : result;
    }

    public static final int SCORE_FIELD_NUMBER = 7;
    private int score_;
    /**
     * <code>required int32 score = 7;</code>
     *
     * <pre>
     * Число очков, которые набрал игрок
     * </pre>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required int32 score = 7;</code>
     *
     * <pre>
     * Число очков, которые набрал игрок
     * </pre>
     */
    public int getScore() {
      return score_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIpAddress()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPort()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRole()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasScore()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, id_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, ipAddress_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, port_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, role_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, type_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, score_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, id_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, ipAddress_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, port_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, role_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, type_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, score_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static lab4.snakes.SnakesProto.GamePlayer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static lab4.snakes.SnakesProto.GamePlayer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GamePlayer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static lab4.snakes.SnakesProto.GamePlayer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GamePlayer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static lab4.snakes.SnakesProto.GamePlayer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GamePlayer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static lab4.snakes.SnakesProto.GamePlayer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GamePlayer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static lab4.snakes.SnakesProto.GamePlayer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lab4.snakes.SnakesProto.GamePlayer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lab4.snakes.GamePlayer}
     *
     * <pre>
     * Игрок
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:lab4.snakes.GamePlayer)
        lab4.snakes.SnakesProto.GamePlayerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GamePlayer_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GamePlayer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GamePlayer.class, lab4.snakes.SnakesProto.GamePlayer.Builder.class);
      }

      // Construct using lab4.snakes.SnakesProto.GamePlayer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        ipAddress_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        port_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        role_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        score_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GamePlayer_descriptor;
      }

      public lab4.snakes.SnakesProto.GamePlayer getDefaultInstanceForType() {
        return lab4.snakes.SnakesProto.GamePlayer.getDefaultInstance();
      }

      public lab4.snakes.SnakesProto.GamePlayer build() {
        lab4.snakes.SnakesProto.GamePlayer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public lab4.snakes.SnakesProto.GamePlayer buildPartial() {
        lab4.snakes.SnakesProto.GamePlayer result = new lab4.snakes.SnakesProto.GamePlayer(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.ipAddress_ = ipAddress_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.port_ = port_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.role_ = role_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.score_ = score_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof lab4.snakes.SnakesProto.GamePlayer) {
          return mergeFrom((lab4.snakes.SnakesProto.GamePlayer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(lab4.snakes.SnakesProto.GamePlayer other) {
        if (other == lab4.snakes.SnakesProto.GamePlayer.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasIpAddress()) {
          bitField0_ |= 0x00000004;
          ipAddress_ = other.ipAddress_;
          onChanged();
        }
        if (other.hasPort()) {
          setPort(other.getPort());
        }
        if (other.hasRole()) {
          setRole(other.getRole());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasName()) {
          return false;
        }
        if (!hasId()) {
          return false;
        }
        if (!hasIpAddress()) {
          return false;
        }
        if (!hasPort()) {
          return false;
        }
        if (!hasRole()) {
          return false;
        }
        if (!hasScore()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        lab4.snakes.SnakesProto.GamePlayer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (lab4.snakes.SnakesProto.GamePlayer) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * Имя игрока (для отображения в интерфейсе)
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * Имя игрока (для отображения в интерфейсе)
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * Имя игрока (для отображения в интерфейсе)
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * Имя игрока (для отображения в интерфейсе)
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * Имя игрока (для отображения в интерфейсе)
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * Имя игрока (для отображения в интерфейсе)
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private int id_ ;
      /**
       * <code>required int32 id = 2;</code>
       *
       * <pre>
       * Уникальный идентификатор игрока в пределах игры
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 id = 2;</code>
       *
       * <pre>
       * Уникальный идентификатор игрока в пределах игры
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required int32 id = 2;</code>
       *
       * <pre>
       * Уникальный идентификатор игрока в пределах игры
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000002;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 id = 2;</code>
       *
       * <pre>
       * Уникальный идентификатор игрока в пределах игры
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        id_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object ipAddress_ = "";
      /**
       * <code>required string ip_address = 3;</code>
       *
       * <pre>
       * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
       * </pre>
       */
      public boolean hasIpAddress() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string ip_address = 3;</code>
       *
       * <pre>
       * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
       * </pre>
       */
      public java.lang.String getIpAddress() {
        java.lang.Object ref = ipAddress_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            ipAddress_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string ip_address = 3;</code>
       *
       * <pre>
       * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIpAddressBytes() {
        java.lang.Object ref = ipAddress_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ipAddress_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string ip_address = 3;</code>
       *
       * <pre>
       * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
       * </pre>
       */
      public Builder setIpAddress(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        ipAddress_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string ip_address = 3;</code>
       *
       * <pre>
       * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
       * </pre>
       */
      public Builder clearIpAddress() {
        bitField0_ = (bitField0_ & ~0x00000004);
        ipAddress_ = getDefaultInstance().getIpAddress();
        onChanged();
        return this;
      }
      /**
       * <code>required string ip_address = 3;</code>
       *
       * <pre>
       * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
       * </pre>
       */
      public Builder setIpAddressBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        ipAddress_ = value;
        onChanged();
        return this;
      }

      private int port_ ;
      /**
       * <code>required int32 port = 4;</code>
       *
       * <pre>
       * Порт UDP-сокета игрока
       * </pre>
       */
      public boolean hasPort() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 port = 4;</code>
       *
       * <pre>
       * Порт UDP-сокета игрока
       * </pre>
       */
      public int getPort() {
        return port_;
      }
      /**
       * <code>required int32 port = 4;</code>
       *
       * <pre>
       * Порт UDP-сокета игрока
       * </pre>
       */
      public Builder setPort(int value) {
        bitField0_ |= 0x00000008;
        port_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 port = 4;</code>
       *
       * <pre>
       * Порт UDP-сокета игрока
       * </pre>
       */
      public Builder clearPort() {
        bitField0_ = (bitField0_ & ~0x00000008);
        port_ = 0;
        onChanged();
        return this;
      }

      private int role_ = 0;
      /**
       * <code>required .lab4.snakes.NodeRole role = 5;</code>
       *
       * <pre>
       * Роль узла в топологии
       * </pre>
       */
      public boolean hasRole() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required .lab4.snakes.NodeRole role = 5;</code>
       *
       * <pre>
       * Роль узла в топологии
       * </pre>
       */
      public lab4.snakes.SnakesProto.NodeRole getRole() {
        lab4.snakes.SnakesProto.NodeRole result = lab4.snakes.SnakesProto.NodeRole.valueOf(role_);
        return result == null ? lab4.snakes.SnakesProto.NodeRole.NORMAL : result;
      }
      /**
       * <code>required .lab4.snakes.NodeRole role = 5;</code>
       *
       * <pre>
       * Роль узла в топологии
       * </pre>
       */
      public Builder setRole(lab4.snakes.SnakesProto.NodeRole value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        role_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>required .lab4.snakes.NodeRole role = 5;</code>
       *
       * <pre>
       * Роль узла в топологии
       * </pre>
       */
      public Builder clearRole() {
        bitField0_ = (bitField0_ & ~0x00000010);
        role_ = 0;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <code>optional .lab4.snakes.PlayerType type = 6 [default = HUMAN];</code>
       *
       * <pre>
       * Тип игрока
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .lab4.snakes.PlayerType type = 6 [default = HUMAN];</code>
       *
       * <pre>
       * Тип игрока
       * </pre>
       */
      public lab4.snakes.SnakesProto.PlayerType getType() {
        lab4.snakes.SnakesProto.PlayerType result = lab4.snakes.SnakesProto.PlayerType.valueOf(type_);
        return result == null ? lab4.snakes.SnakesProto.PlayerType.HUMAN : result;
      }
      /**
       * <code>optional .lab4.snakes.PlayerType type = 6 [default = HUMAN];</code>
       *
       * <pre>
       * Тип игрока
       * </pre>
       */
      public Builder setType(lab4.snakes.SnakesProto.PlayerType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .lab4.snakes.PlayerType type = 6 [default = HUMAN];</code>
       *
       * <pre>
       * Тип игрока
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000020);
        type_ = 0;
        onChanged();
        return this;
      }

      private int score_ ;
      /**
       * <code>required int32 score = 7;</code>
       *
       * <pre>
       * Число очков, которые набрал игрок
       * </pre>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 score = 7;</code>
       *
       * <pre>
       * Число очков, которые набрал игрок
       * </pre>
       */
      public int getScore() {
        return score_;
      }
      /**
       * <code>required int32 score = 7;</code>
       *
       * <pre>
       * Число очков, которые набрал игрок
       * </pre>
       */
      public Builder setScore(int value) {
        bitField0_ |= 0x00000040;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 score = 7;</code>
       *
       * <pre>
       * Число очков, которые набрал игрок
       * </pre>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000040);
        score_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lab4.snakes.GamePlayer)
    }

    // @@protoc_insertion_point(class_scope:lab4.snakes.GamePlayer)
    private static final lab4.snakes.SnakesProto.GamePlayer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GamePlayer();
    }

    public static lab4.snakes.SnakesProto.GamePlayer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<GamePlayer>
        PARSER = new com.google.protobuf.AbstractParser<GamePlayer>() {
      public GamePlayer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new GamePlayer(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<GamePlayer> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GamePlayer> getParserForType() {
      return PARSER;
    }

    public lab4.snakes.SnakesProto.GamePlayer getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GameConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lab4.snakes.GameConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 width = 1 [default = 40];</code>
     *
     * <pre>
     * Ширина поля в клетках (от 10 до 100)
     * </pre>
     */
    boolean hasWidth();
    /**
     * <code>optional int32 width = 1 [default = 40];</code>
     *
     * <pre>
     * Ширина поля в клетках (от 10 до 100)
     * </pre>
     */
    int getWidth();

    /**
     * <code>optional int32 height = 2 [default = 30];</code>
     *
     * <pre>
     * Высота поля в клетках (от 10 до 100)
     * </pre>
     */
    boolean hasHeight();
    /**
     * <code>optional int32 height = 2 [default = 30];</code>
     *
     * <pre>
     * Высота поля в клетках (от 10 до 100)
     * </pre>
     */
    int getHeight();

    /**
     * <code>optional int32 food_static = 3 [default = 1];</code>
     *
     * <pre>
     * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
     * </pre>
     */
    boolean hasFoodStatic();
    /**
     * <code>optional int32 food_static = 3 [default = 1];</code>
     *
     * <pre>
     * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
     * </pre>
     */
    int getFoodStatic();

    /**
     * <code>optional float food_per_player = 4 [default = 1];</code>
     *
     * <pre>
     * Количество клеток с едой, на каждого игрока (вещественный коэффициент от 0 до 100)
     * </pre>
     */
    boolean hasFoodPerPlayer();
    /**
     * <code>optional float food_per_player = 4 [default = 1];</code>
     *
     * <pre>
     * Количество клеток с едой, на каждого игрока (вещественный коэффициент от 0 до 100)
     * </pre>
     */
    float getFoodPerPlayer();

    /**
     * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
     *
     * <pre>
     * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 1 до 10000)
     * </pre>
     */
    boolean hasStateDelayMs();
    /**
     * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
     *
     * <pre>
     * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 1 до 10000)
     * </pre>
     */
    int getStateDelayMs();

    /**
     * <code>optional float dead_food_prob = 6 [default = 0.1];</code>
     *
     * <pre>
     * Вероятность превращения мёртвой клетки в еду (от 0 до 1).
     * </pre>
     */
    boolean hasDeadFoodProb();
    /**
     * <code>optional float dead_food_prob = 6 [default = 0.1];</code>
     *
     * <pre>
     * Вероятность превращения мёртвой клетки в еду (от 0 до 1).
     * </pre>
     */
    float getDeadFoodProb();

    /**
     * <code>optional int32 ping_delay_ms = 7 [default = 100];</code>
     *
     * <pre>
     * Задержка между отправкой ping-сообщений, в миллисекундах (от 1 до 10000)
     * </pre>
     */
    boolean hasPingDelayMs();
    /**
     * <code>optional int32 ping_delay_ms = 7 [default = 100];</code>
     *
     * <pre>
     * Задержка между отправкой ping-сообщений, в миллисекундах (от 1 до 10000)
     * </pre>
     */
    int getPingDelayMs();

    /**
     * <code>optional int32 node_timeout_ms = 8 [default = 800];</code>
     *
     * <pre>
     * Таймаут, после которого считаем что узел-сосед отпал, в миллисекундах (от 1 до 10000)
     * </pre>
     */
    boolean hasNodeTimeoutMs();
    /**
     * <code>optional int32 node_timeout_ms = 8 [default = 800];</code>
     *
     * <pre>
     * Таймаут, после которого считаем что узел-сосед отпал, в миллисекундах (от 1 до 10000)
     * </pre>
     */
    int getNodeTimeoutMs();
  }
  /**
   * Protobuf type {@code lab4.snakes.GameConfig}
   *
   * <pre>
   * Параметры идущей игры (не должны меняться в процессе игры) 
   * </pre>
   */
  public  static final class GameConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:lab4.snakes.GameConfig)
      GameConfigOrBuilder {
    // Use GameConfig.newBuilder() to construct.
    private GameConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private GameConfig() {
      width_ = 40;
      height_ = 30;
      foodStatic_ = 1;
      foodPerPlayer_ = 1F;
      stateDelayMs_ = 1000;
      deadFoodProb_ = 0.1F;
      pingDelayMs_ = 100;
      nodeTimeoutMs_ = 800;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GameConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              width_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              height_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              foodStatic_ = input.readInt32();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              foodPerPlayer_ = input.readFloat();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              stateDelayMs_ = input.readInt32();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              deadFoodProb_ = input.readFloat();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              pingDelayMs_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              nodeTimeoutMs_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              lab4.snakes.SnakesProto.GameConfig.class, lab4.snakes.SnakesProto.GameConfig.Builder.class);
    }

    private int bitField0_;
    public static final int WIDTH_FIELD_NUMBER = 1;
    private int width_;
    /**
     * <code>optional int32 width = 1 [default = 40];</code>
     *
     * <pre>
     * Ширина поля в клетках (от 10 до 100)
     * </pre>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 width = 1 [default = 40];</code>
     *
     * <pre>
     * Ширина поля в клетках (от 10 до 100)
     * </pre>
     */
    public int getWidth() {
      return width_;
    }

    public static final int HEIGHT_FIELD_NUMBER = 2;
    private int height_;
    /**
     * <code>optional int32 height = 2 [default = 30];</code>
     *
     * <pre>
     * Высота поля в клетках (от 10 до 100)
     * </pre>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 height = 2 [default = 30];</code>
     *
     * <pre>
     * Высота поля в клетках (от 10 до 100)
     * </pre>
     */
    public int getHeight() {
      return height_;
    }

    public static final int FOOD_STATIC_FIELD_NUMBER = 3;
    private int foodStatic_;
    /**
     * <code>optional int32 food_static = 3 [default = 1];</code>
     *
     * <pre>
     * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
     * </pre>
     */
    public boolean hasFoodStatic() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 food_static = 3 [default = 1];</code>
     *
     * <pre>
     * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
     * </pre>
     */
    public int getFoodStatic() {
      return foodStatic_;
    }

    public static final int FOOD_PER_PLAYER_FIELD_NUMBER = 4;
    private float foodPerPlayer_;
    /**
     * <code>optional float food_per_player = 4 [default = 1];</code>
     *
     * <pre>
     * Количество клеток с едой, на каждого игрока (вещественный коэффициент от 0 до 100)
     * </pre>
     */
    public boolean hasFoodPerPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float food_per_player = 4 [default = 1];</code>
     *
     * <pre>
     * Количество клеток с едой, на каждого игрока (вещественный коэффициент от 0 до 100)
     * </pre>
     */
    public float getFoodPerPlayer() {
      return foodPerPlayer_;
    }

    public static final int STATE_DELAY_MS_FIELD_NUMBER = 5;
    private int stateDelayMs_;
    /**
     * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
     *
     * <pre>
     * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 1 до 10000)
     * </pre>
     */
    public boolean hasStateDelayMs() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
     *
     * <pre>
     * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 1 до 10000)
     * </pre>
     */
    public int getStateDelayMs() {
      return stateDelayMs_;
    }

    public static final int DEAD_FOOD_PROB_FIELD_NUMBER = 6;
    private float deadFoodProb_;
    /**
     * <code>optional float dead_food_prob = 6 [default = 0.1];</code>
     *
     * <pre>
     * Вероятность превращения мёртвой клетки в еду (от 0 до 1).
     * </pre>
     */
    public boolean hasDeadFoodProb() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float dead_food_prob = 6 [default = 0.1];</code>
     *
     * <pre>
     * Вероятность превращения мёртвой клетки в еду (от 0 до 1).
     * </pre>
     */
    public float getDeadFoodProb() {
      return deadFoodProb_;
    }

    public static final int PING_DELAY_MS_FIELD_NUMBER = 7;
    private int pingDelayMs_;
    /**
     * <code>optional int32 ping_delay_ms = 7 [default = 100];</code>
     *
     * <pre>
     * Задержка между отправкой ping-сообщений, в миллисекундах (от 1 до 10000)
     * </pre>
     */
    public boolean hasPingDelayMs() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 ping_delay_ms = 7 [default = 100];</code>
     *
     * <pre>
     * Задержка между отправкой ping-сообщений, в миллисекундах (от 1 до 10000)
     * </pre>
     */
    public int getPingDelayMs() {
      return pingDelayMs_;
    }

    public static final int NODE_TIMEOUT_MS_FIELD_NUMBER = 8;
    private int nodeTimeoutMs_;
    /**
     * <code>optional int32 node_timeout_ms = 8 [default = 800];</code>
     *
     * <pre>
     * Таймаут, после которого считаем что узел-сосед отпал, в миллисекундах (от 1 до 10000)
     * </pre>
     */
    public boolean hasNodeTimeoutMs() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 node_timeout_ms = 8 [default = 800];</code>
     *
     * <pre>
     * Таймаут, после которого считаем что узел-сосед отпал, в миллисекундах (от 1 до 10000)
     * </pre>
     */
    public int getNodeTimeoutMs() {
      return nodeTimeoutMs_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, width_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, height_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, foodStatic_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, foodPerPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, stateDelayMs_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, deadFoodProb_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, pingDelayMs_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, nodeTimeoutMs_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, width_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, height_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, foodStatic_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, foodPerPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, stateDelayMs_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, deadFoodProb_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, pingDelayMs_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, nodeTimeoutMs_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static lab4.snakes.SnakesProto.GameConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static lab4.snakes.SnakesProto.GameConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GameConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static lab4.snakes.SnakesProto.GameConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GameConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static lab4.snakes.SnakesProto.GameConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GameConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static lab4.snakes.SnakesProto.GameConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GameConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static lab4.snakes.SnakesProto.GameConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lab4.snakes.SnakesProto.GameConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lab4.snakes.GameConfig}
     *
     * <pre>
     * Параметры идущей игры (не должны меняться в процессе игры) 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:lab4.snakes.GameConfig)
        lab4.snakes.SnakesProto.GameConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GameConfig.class, lab4.snakes.SnakesProto.GameConfig.Builder.class);
      }

      // Construct using lab4.snakes.SnakesProto.GameConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        width_ = 40;
        bitField0_ = (bitField0_ & ~0x00000001);
        height_ = 30;
        bitField0_ = (bitField0_ & ~0x00000002);
        foodStatic_ = 1;
        bitField0_ = (bitField0_ & ~0x00000004);
        foodPerPlayer_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000008);
        stateDelayMs_ = 1000;
        bitField0_ = (bitField0_ & ~0x00000010);
        deadFoodProb_ = 0.1F;
        bitField0_ = (bitField0_ & ~0x00000020);
        pingDelayMs_ = 100;
        bitField0_ = (bitField0_ & ~0x00000040);
        nodeTimeoutMs_ = 800;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameConfig_descriptor;
      }

      public lab4.snakes.SnakesProto.GameConfig getDefaultInstanceForType() {
        return lab4.snakes.SnakesProto.GameConfig.getDefaultInstance();
      }

      public lab4.snakes.SnakesProto.GameConfig build() {
        lab4.snakes.SnakesProto.GameConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public lab4.snakes.SnakesProto.GameConfig buildPartial() {
        lab4.snakes.SnakesProto.GameConfig result = new lab4.snakes.SnakesProto.GameConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.foodStatic_ = foodStatic_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.foodPerPlayer_ = foodPerPlayer_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.stateDelayMs_ = stateDelayMs_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.deadFoodProb_ = deadFoodProb_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.pingDelayMs_ = pingDelayMs_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.nodeTimeoutMs_ = nodeTimeoutMs_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof lab4.snakes.SnakesProto.GameConfig) {
          return mergeFrom((lab4.snakes.SnakesProto.GameConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(lab4.snakes.SnakesProto.GameConfig other) {
        if (other == lab4.snakes.SnakesProto.GameConfig.getDefaultInstance()) return this;
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasFoodStatic()) {
          setFoodStatic(other.getFoodStatic());
        }
        if (other.hasFoodPerPlayer()) {
          setFoodPerPlayer(other.getFoodPerPlayer());
        }
        if (other.hasStateDelayMs()) {
          setStateDelayMs(other.getStateDelayMs());
        }
        if (other.hasDeadFoodProb()) {
          setDeadFoodProb(other.getDeadFoodProb());
        }
        if (other.hasPingDelayMs()) {
          setPingDelayMs(other.getPingDelayMs());
        }
        if (other.hasNodeTimeoutMs()) {
          setNodeTimeoutMs(other.getNodeTimeoutMs());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        lab4.snakes.SnakesProto.GameConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (lab4.snakes.SnakesProto.GameConfig) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int width_ = 40;
      /**
       * <code>optional int32 width = 1 [default = 40];</code>
       *
       * <pre>
       * Ширина поля в клетках (от 10 до 100)
       * </pre>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 width = 1 [default = 40];</code>
       *
       * <pre>
       * Ширина поля в клетках (от 10 до 100)
       * </pre>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>optional int32 width = 1 [default = 40];</code>
       *
       * <pre>
       * Ширина поля в клетках (от 10 до 100)
       * </pre>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000001;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 width = 1 [default = 40];</code>
       *
       * <pre>
       * Ширина поля в клетках (от 10 до 100)
       * </pre>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000001);
        width_ = 40;
        onChanged();
        return this;
      }

      private int height_ = 30;
      /**
       * <code>optional int32 height = 2 [default = 30];</code>
       *
       * <pre>
       * Высота поля в клетках (от 10 до 100)
       * </pre>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 height = 2 [default = 30];</code>
       *
       * <pre>
       * Высота поля в клетках (от 10 до 100)
       * </pre>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>optional int32 height = 2 [default = 30];</code>
       *
       * <pre>
       * Высота поля в клетках (от 10 до 100)
       * </pre>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000002;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 height = 2 [default = 30];</code>
       *
       * <pre>
       * Высота поля в клетках (от 10 до 100)
       * </pre>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000002);
        height_ = 30;
        onChanged();
        return this;
      }

      private int foodStatic_ = 1;
      /**
       * <code>optional int32 food_static = 3 [default = 1];</code>
       *
       * <pre>
       * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
       * </pre>
       */
      public boolean hasFoodStatic() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 food_static = 3 [default = 1];</code>
       *
       * <pre>
       * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
       * </pre>
       */
      public int getFoodStatic() {
        return foodStatic_;
      }
      /**
       * <code>optional int32 food_static = 3 [default = 1];</code>
       *
       * <pre>
       * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
       * </pre>
       */
      public Builder setFoodStatic(int value) {
        bitField0_ |= 0x00000004;
        foodStatic_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 food_static = 3 [default = 1];</code>
       *
       * <pre>
       * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
       * </pre>
       */
      public Builder clearFoodStatic() {
        bitField0_ = (bitField0_ & ~0x00000004);
        foodStatic_ = 1;
        onChanged();
        return this;
      }

      private float foodPerPlayer_ = 1F;
      /**
       * <code>optional float food_per_player = 4 [default = 1];</code>
       *
       * <pre>
       * Количество клеток с едой, на каждого игрока (вещественный коэффициент от 0 до 100)
       * </pre>
       */
      public boolean hasFoodPerPlayer() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float food_per_player = 4 [default = 1];</code>
       *
       * <pre>
       * Количество клеток с едой, на каждого игрока (вещественный коэффициент от 0 до 100)
       * </pre>
       */
      public float getFoodPerPlayer() {
        return foodPerPlayer_;
      }
      /**
       * <code>optional float food_per_player = 4 [default = 1];</code>
       *
       * <pre>
       * Количество клеток с едой, на каждого игрока (вещественный коэффициент от 0 до 100)
       * </pre>
       */
      public Builder setFoodPerPlayer(float value) {
        bitField0_ |= 0x00000008;
        foodPerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float food_per_player = 4 [default = 1];</code>
       *
       * <pre>
       * Количество клеток с едой, на каждого игрока (вещественный коэффициент от 0 до 100)
       * </pre>
       */
      public Builder clearFoodPerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000008);
        foodPerPlayer_ = 1F;
        onChanged();
        return this;
      }

      private int stateDelayMs_ = 1000;
      /**
       * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
       *
       * <pre>
       * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 1 до 10000)
       * </pre>
       */
      public boolean hasStateDelayMs() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
       *
       * <pre>
       * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 1 до 10000)
       * </pre>
       */
      public int getStateDelayMs() {
        return stateDelayMs_;
      }
      /**
       * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
       *
       * <pre>
       * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 1 до 10000)
       * </pre>
       */
      public Builder setStateDelayMs(int value) {
        bitField0_ |= 0x00000010;
        stateDelayMs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
       *
       * <pre>
       * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 1 до 10000)
       * </pre>
       */
      public Builder clearStateDelayMs() {
        bitField0_ = (bitField0_ & ~0x00000010);
        stateDelayMs_ = 1000;
        onChanged();
        return this;
      }

      private float deadFoodProb_ = 0.1F;
      /**
       * <code>optional float dead_food_prob = 6 [default = 0.1];</code>
       *
       * <pre>
       * Вероятность превращения мёртвой клетки в еду (от 0 до 1).
       * </pre>
       */
      public boolean hasDeadFoodProb() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float dead_food_prob = 6 [default = 0.1];</code>
       *
       * <pre>
       * Вероятность превращения мёртвой клетки в еду (от 0 до 1).
       * </pre>
       */
      public float getDeadFoodProb() {
        return deadFoodProb_;
      }
      /**
       * <code>optional float dead_food_prob = 6 [default = 0.1];</code>
       *
       * <pre>
       * Вероятность превращения мёртвой клетки в еду (от 0 до 1).
       * </pre>
       */
      public Builder setDeadFoodProb(float value) {
        bitField0_ |= 0x00000020;
        deadFoodProb_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float dead_food_prob = 6 [default = 0.1];</code>
       *
       * <pre>
       * Вероятность превращения мёртвой клетки в еду (от 0 до 1).
       * </pre>
       */
      public Builder clearDeadFoodProb() {
        bitField0_ = (bitField0_ & ~0x00000020);
        deadFoodProb_ = 0.1F;
        onChanged();
        return this;
      }

      private int pingDelayMs_ = 100;
      /**
       * <code>optional int32 ping_delay_ms = 7 [default = 100];</code>
       *
       * <pre>
       * Задержка между отправкой ping-сообщений, в миллисекундах (от 1 до 10000)
       * </pre>
       */
      public boolean hasPingDelayMs() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 ping_delay_ms = 7 [default = 100];</code>
       *
       * <pre>
       * Задержка между отправкой ping-сообщений, в миллисекундах (от 1 до 10000)
       * </pre>
       */
      public int getPingDelayMs() {
        return pingDelayMs_;
      }
      /**
       * <code>optional int32 ping_delay_ms = 7 [default = 100];</code>
       *
       * <pre>
       * Задержка между отправкой ping-сообщений, в миллисекундах (от 1 до 10000)
       * </pre>
       */
      public Builder setPingDelayMs(int value) {
        bitField0_ |= 0x00000040;
        pingDelayMs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ping_delay_ms = 7 [default = 100];</code>
       *
       * <pre>
       * Задержка между отправкой ping-сообщений, в миллисекундах (от 1 до 10000)
       * </pre>
       */
      public Builder clearPingDelayMs() {
        bitField0_ = (bitField0_ & ~0x00000040);
        pingDelayMs_ = 100;
        onChanged();
        return this;
      }

      private int nodeTimeoutMs_ = 800;
      /**
       * <code>optional int32 node_timeout_ms = 8 [default = 800];</code>
       *
       * <pre>
       * Таймаут, после которого считаем что узел-сосед отпал, в миллисекундах (от 1 до 10000)
       * </pre>
       */
      public boolean hasNodeTimeoutMs() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 node_timeout_ms = 8 [default = 800];</code>
       *
       * <pre>
       * Таймаут, после которого считаем что узел-сосед отпал, в миллисекундах (от 1 до 10000)
       * </pre>
       */
      public int getNodeTimeoutMs() {
        return nodeTimeoutMs_;
      }
      /**
       * <code>optional int32 node_timeout_ms = 8 [default = 800];</code>
       *
       * <pre>
       * Таймаут, после которого считаем что узел-сосед отпал, в миллисекундах (от 1 до 10000)
       * </pre>
       */
      public Builder setNodeTimeoutMs(int value) {
        bitField0_ |= 0x00000080;
        nodeTimeoutMs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 node_timeout_ms = 8 [default = 800];</code>
       *
       * <pre>
       * Таймаут, после которого считаем что узел-сосед отпал, в миллисекундах (от 1 до 10000)
       * </pre>
       */
      public Builder clearNodeTimeoutMs() {
        bitField0_ = (bitField0_ & ~0x00000080);
        nodeTimeoutMs_ = 800;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lab4.snakes.GameConfig)
    }

    // @@protoc_insertion_point(class_scope:lab4.snakes.GameConfig)
    private static final lab4.snakes.SnakesProto.GameConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GameConfig();
    }

    public static lab4.snakes.SnakesProto.GameConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<GameConfig>
        PARSER = new com.google.protobuf.AbstractParser<GameConfig>() {
      public GameConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new GameConfig(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<GameConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GameConfig> getParserForType() {
      return PARSER;
    }

    public lab4.snakes.SnakesProto.GameConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GamePlayersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lab4.snakes.GamePlayers)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
     *
     * <pre>
     * Список всех игроков
     * </pre>
     */
    java.util.List<lab4.snakes.SnakesProto.GamePlayer> 
        getPlayersList();
    /**
     * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
     *
     * <pre>
     * Список всех игроков
     * </pre>
     */
    lab4.snakes.SnakesProto.GamePlayer getPlayers(int index);
    /**
     * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
     *
     * <pre>
     * Список всех игроков
     * </pre>
     */
    int getPlayersCount();
    /**
     * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
     *
     * <pre>
     * Список всех игроков
     * </pre>
     */
    java.util.List<? extends lab4.snakes.SnakesProto.GamePlayerOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
     *
     * <pre>
     * Список всех игроков
     * </pre>
     */
    lab4.snakes.SnakesProto.GamePlayerOrBuilder getPlayersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code lab4.snakes.GamePlayers}
   *
   * <pre>
   * Игроки конкретной игры 
   * </pre>
   */
  public  static final class GamePlayers extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:lab4.snakes.GamePlayers)
      GamePlayersOrBuilder {
    // Use GamePlayers.newBuilder() to construct.
    private GamePlayers(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private GamePlayers() {
      players_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GamePlayers(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                players_ = new java.util.ArrayList<lab4.snakes.SnakesProto.GamePlayer>();
                mutable_bitField0_ |= 0x00000001;
              }
              players_.add(input.readMessage(lab4.snakes.SnakesProto.GamePlayer.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GamePlayers_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GamePlayers_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              lab4.snakes.SnakesProto.GamePlayers.class, lab4.snakes.SnakesProto.GamePlayers.Builder.class);
    }

    public static final int PLAYERS_FIELD_NUMBER = 1;
    private java.util.List<lab4.snakes.SnakesProto.GamePlayer> players_;
    /**
     * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
     *
     * <pre>
     * Список всех игроков
     * </pre>
     */
    public java.util.List<lab4.snakes.SnakesProto.GamePlayer> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
     *
     * <pre>
     * Список всех игроков
     * </pre>
     */
    public java.util.List<? extends lab4.snakes.SnakesProto.GamePlayerOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
     *
     * <pre>
     * Список всех игроков
     * </pre>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
     *
     * <pre>
     * Список всех игроков
     * </pre>
     */
    public lab4.snakes.SnakesProto.GamePlayer getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
     *
     * <pre>
     * Список всех игроков
     * </pre>
     */
    public lab4.snakes.SnakesProto.GamePlayerOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getPlayersCount(); i++) {
        if (!getPlayers(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(1, players_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, players_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static lab4.snakes.SnakesProto.GamePlayers parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static lab4.snakes.SnakesProto.GamePlayers parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GamePlayers parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static lab4.snakes.SnakesProto.GamePlayers parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GamePlayers parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static lab4.snakes.SnakesProto.GamePlayers parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GamePlayers parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static lab4.snakes.SnakesProto.GamePlayers parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GamePlayers parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static lab4.snakes.SnakesProto.GamePlayers parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lab4.snakes.SnakesProto.GamePlayers prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lab4.snakes.GamePlayers}
     *
     * <pre>
     * Игроки конкретной игры 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:lab4.snakes.GamePlayers)
        lab4.snakes.SnakesProto.GamePlayersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GamePlayers_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GamePlayers_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GamePlayers.class, lab4.snakes.SnakesProto.GamePlayers.Builder.class);
      }

      // Construct using lab4.snakes.SnakesProto.GamePlayers.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPlayersFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          playersBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GamePlayers_descriptor;
      }

      public lab4.snakes.SnakesProto.GamePlayers getDefaultInstanceForType() {
        return lab4.snakes.SnakesProto.GamePlayers.getDefaultInstance();
      }

      public lab4.snakes.SnakesProto.GamePlayers build() {
        lab4.snakes.SnakesProto.GamePlayers result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public lab4.snakes.SnakesProto.GamePlayers buildPartial() {
        lab4.snakes.SnakesProto.GamePlayers result = new lab4.snakes.SnakesProto.GamePlayers(this);
        int from_bitField0_ = bitField0_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof lab4.snakes.SnakesProto.GamePlayers) {
          return mergeFrom((lab4.snakes.SnakesProto.GamePlayers)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(lab4.snakes.SnakesProto.GamePlayers other) {
        if (other == lab4.snakes.SnakesProto.GamePlayers.getDefaultInstance()) return this;
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000001);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getPlayersCount(); i++) {
          if (!getPlayers(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        lab4.snakes.SnakesProto.GamePlayers parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (lab4.snakes.SnakesProto.GamePlayers) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<lab4.snakes.SnakesProto.GamePlayer> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          players_ = new java.util.ArrayList<lab4.snakes.SnakesProto.GamePlayer>(players_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          lab4.snakes.SnakesProto.GamePlayer, lab4.snakes.SnakesProto.GamePlayer.Builder, lab4.snakes.SnakesProto.GamePlayerOrBuilder> playersBuilder_;

      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public java.util.List<lab4.snakes.SnakesProto.GamePlayer> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public lab4.snakes.SnakesProto.GamePlayer getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public Builder setPlayers(
          int index, lab4.snakes.SnakesProto.GamePlayer value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public Builder setPlayers(
          int index, lab4.snakes.SnakesProto.GamePlayer.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public Builder addPlayers(lab4.snakes.SnakesProto.GamePlayer value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public Builder addPlayers(
          int index, lab4.snakes.SnakesProto.GamePlayer value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public Builder addPlayers(
          lab4.snakes.SnakesProto.GamePlayer.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public Builder addPlayers(
          int index, lab4.snakes.SnakesProto.GamePlayer.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends lab4.snakes.SnakesProto.GamePlayer> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public lab4.snakes.SnakesProto.GamePlayer.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public lab4.snakes.SnakesProto.GamePlayerOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public java.util.List<? extends lab4.snakes.SnakesProto.GamePlayerOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public lab4.snakes.SnakesProto.GamePlayer.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            lab4.snakes.SnakesProto.GamePlayer.getDefaultInstance());
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public lab4.snakes.SnakesProto.GamePlayer.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, lab4.snakes.SnakesProto.GamePlayer.getDefaultInstance());
      }
      /**
       * <code>repeated .lab4.snakes.GamePlayer players = 1;</code>
       *
       * <pre>
       * Список всех игроков
       * </pre>
       */
      public java.util.List<lab4.snakes.SnakesProto.GamePlayer.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          lab4.snakes.SnakesProto.GamePlayer, lab4.snakes.SnakesProto.GamePlayer.Builder, lab4.snakes.SnakesProto.GamePlayerOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              lab4.snakes.SnakesProto.GamePlayer, lab4.snakes.SnakesProto.GamePlayer.Builder, lab4.snakes.SnakesProto.GamePlayerOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:lab4.snakes.GamePlayers)
    }

    // @@protoc_insertion_point(class_scope:lab4.snakes.GamePlayers)
    private static final lab4.snakes.SnakesProto.GamePlayers DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GamePlayers();
    }

    public static lab4.snakes.SnakesProto.GamePlayers getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<GamePlayers>
        PARSER = new com.google.protobuf.AbstractParser<GamePlayers>() {
      public GamePlayers parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new GamePlayers(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<GamePlayers> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GamePlayers> getParserForType() {
      return PARSER;
    }

    public lab4.snakes.SnakesProto.GamePlayers getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GameStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lab4.snakes.GameState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 state_order = 1;</code>
     *
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     */
    boolean hasStateOrder();
    /**
     * <code>required int32 state_order = 1;</code>
     *
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     */
    int getStateOrder();

    /**
     * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
     *
     * <pre>
     * Список змей
     * </pre>
     */
    java.util.List<lab4.snakes.SnakesProto.GameState.Snake> 
        getSnakesList();
    /**
     * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
     *
     * <pre>
     * Список змей
     * </pre>
     */
    lab4.snakes.SnakesProto.GameState.Snake getSnakes(int index);
    /**
     * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
     *
     * <pre>
     * Список змей
     * </pre>
     */
    int getSnakesCount();
    /**
     * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
     *
     * <pre>
     * Список змей
     * </pre>
     */
    java.util.List<? extends lab4.snakes.SnakesProto.GameState.SnakeOrBuilder> 
        getSnakesOrBuilderList();
    /**
     * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
     *
     * <pre>
     * Список змей
     * </pre>
     */
    lab4.snakes.SnakesProto.GameState.SnakeOrBuilder getSnakesOrBuilder(
        int index);

    /**
     * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
     *
     * <pre>
     * Список клеток с едой
     * </pre>
     */
    java.util.List<lab4.snakes.SnakesProto.GameState.Coord> 
        getFoodsList();
    /**
     * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
     *
     * <pre>
     * Список клеток с едой
     * </pre>
     */
    lab4.snakes.SnakesProto.GameState.Coord getFoods(int index);
    /**
     * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
     *
     * <pre>
     * Список клеток с едой
     * </pre>
     */
    int getFoodsCount();
    /**
     * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
     *
     * <pre>
     * Список клеток с едой
     * </pre>
     */
    java.util.List<? extends lab4.snakes.SnakesProto.GameState.CoordOrBuilder> 
        getFoodsOrBuilderList();
    /**
     * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
     *
     * <pre>
     * Список клеток с едой
     * </pre>
     */
    lab4.snakes.SnakesProto.GameState.CoordOrBuilder getFoodsOrBuilder(
        int index);

    /**
     * <code>required .lab4.snakes.GamePlayers players = 4;</code>
     *
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     */
    boolean hasPlayers();
    /**
     * <code>required .lab4.snakes.GamePlayers players = 4;</code>
     *
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     */
    lab4.snakes.SnakesProto.GamePlayers getPlayers();
    /**
     * <code>required .lab4.snakes.GamePlayers players = 4;</code>
     *
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     */
    lab4.snakes.SnakesProto.GamePlayersOrBuilder getPlayersOrBuilder();

    /**
     * <code>required .lab4.snakes.GameConfig config = 5;</code>
     *
     * <pre>
     * Параметры игры
     * </pre>
     */
    boolean hasConfig();
    /**
     * <code>required .lab4.snakes.GameConfig config = 5;</code>
     *
     * <pre>
     * Параметры игры
     * </pre>
     */
    lab4.snakes.SnakesProto.GameConfig getConfig();
    /**
     * <code>required .lab4.snakes.GameConfig config = 5;</code>
     *
     * <pre>
     * Параметры игры
     * </pre>
     */
    lab4.snakes.SnakesProto.GameConfigOrBuilder getConfigOrBuilder();
  }
  /**
   * Protobuf type {@code lab4.snakes.GameState}
   *
   * <pre>
   * Текущее состояние игрового поля 
   * </pre>
   */
  public  static final class GameState extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:lab4.snakes.GameState)
      GameStateOrBuilder {
    // Use GameState.newBuilder() to construct.
    private GameState(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private GameState() {
      stateOrder_ = 0;
      snakes_ = java.util.Collections.emptyList();
      foods_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GameState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              stateOrder_ = input.readInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                snakes_ = new java.util.ArrayList<lab4.snakes.SnakesProto.GameState.Snake>();
                mutable_bitField0_ |= 0x00000002;
              }
              snakes_.add(input.readMessage(lab4.snakes.SnakesProto.GameState.Snake.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                foods_ = new java.util.ArrayList<lab4.snakes.SnakesProto.GameState.Coord>();
                mutable_bitField0_ |= 0x00000004;
              }
              foods_.add(input.readMessage(lab4.snakes.SnakesProto.GameState.Coord.parser(), extensionRegistry));
              break;
            }
            case 34: {
              lab4.snakes.SnakesProto.GamePlayers.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = players_.toBuilder();
              }
              players_ = input.readMessage(lab4.snakes.SnakesProto.GamePlayers.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(players_);
                players_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 42: {
              lab4.snakes.SnakesProto.GameConfig.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = config_.toBuilder();
              }
              config_ = input.readMessage(lab4.snakes.SnakesProto.GameConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(config_);
                config_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          snakes_ = java.util.Collections.unmodifiableList(snakes_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          foods_ = java.util.Collections.unmodifiableList(foods_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              lab4.snakes.SnakesProto.GameState.class, lab4.snakes.SnakesProto.GameState.Builder.class);
    }

    public interface CoordOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lab4.snakes.GameState.Coord)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional sint32 x = 1 [default = 0];</code>
       *
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       */
      boolean hasX();
      /**
       * <code>optional sint32 x = 1 [default = 0];</code>
       *
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       */
      int getX();

      /**
       * <code>optional sint32 y = 2 [default = 0];</code>
       *
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       */
      boolean hasY();
      /**
       * <code>optional sint32 y = 2 [default = 0];</code>
       *
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       */
      int getY();
    }
    /**
     * Protobuf type {@code lab4.snakes.GameState.Coord}
     *
     * <pre>
     * Координаты в пределах игрового поля, либо относительное смещение координат.
     * Левая верхняя клетка поля имеет координаты (x=0, y=0).
     * Направление смещения задаётся знаком чисел. 
     * </pre>
     */
    public  static final class Coord extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:lab4.snakes.GameState.Coord)
        CoordOrBuilder {
      // Use Coord.newBuilder() to construct.
      private Coord(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Coord() {
        x_ = 0;
        y_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Coord(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                x_ = input.readSInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                y_ = input.readSInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_Coord_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_Coord_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GameState.Coord.class, lab4.snakes.SnakesProto.GameState.Coord.Builder.class);
      }

      private int bitField0_;
      public static final int X_FIELD_NUMBER = 1;
      private int x_;
      /**
       * <code>optional sint32 x = 1 [default = 0];</code>
       *
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sint32 x = 1 [default = 0];</code>
       *
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       */
      public int getX() {
        return x_;
      }

      public static final int Y_FIELD_NUMBER = 2;
      private int y_;
      /**
       * <code>optional sint32 y = 2 [default = 0];</code>
       *
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 y = 2 [default = 0];</code>
       *
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       */
      public int getY() {
        return y_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeSInt32(1, x_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeSInt32(2, y_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeSInt32Size(1, x_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeSInt32Size(2, y_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static lab4.snakes.SnakesProto.GameState.Coord parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameState.Coord parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameState.Coord parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameState.Coord parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameState.Coord parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameState.Coord parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameState.Coord parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameState.Coord parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameState.Coord parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameState.Coord parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lab4.snakes.SnakesProto.GameState.Coord prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code lab4.snakes.GameState.Coord}
       *
       * <pre>
       * Координаты в пределах игрового поля, либо относительное смещение координат.
       * Левая верхняя клетка поля имеет координаты (x=0, y=0).
       * Направление смещения задаётся знаком чисел. 
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:lab4.snakes.GameState.Coord)
          lab4.snakes.SnakesProto.GameState.CoordOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_Coord_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_Coord_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  lab4.snakes.SnakesProto.GameState.Coord.class, lab4.snakes.SnakesProto.GameState.Coord.Builder.class);
        }

        // Construct using lab4.snakes.SnakesProto.GameState.Coord.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          x_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          y_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_Coord_descriptor;
        }

        public lab4.snakes.SnakesProto.GameState.Coord getDefaultInstanceForType() {
          return lab4.snakes.SnakesProto.GameState.Coord.getDefaultInstance();
        }

        public lab4.snakes.SnakesProto.GameState.Coord build() {
          lab4.snakes.SnakesProto.GameState.Coord result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public lab4.snakes.SnakesProto.GameState.Coord buildPartial() {
          lab4.snakes.SnakesProto.GameState.Coord result = new lab4.snakes.SnakesProto.GameState.Coord(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.x_ = x_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.y_ = y_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof lab4.snakes.SnakesProto.GameState.Coord) {
            return mergeFrom((lab4.snakes.SnakesProto.GameState.Coord)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(lab4.snakes.SnakesProto.GameState.Coord other) {
          if (other == lab4.snakes.SnakesProto.GameState.Coord.getDefaultInstance()) return this;
          if (other.hasX()) {
            setX(other.getX());
          }
          if (other.hasY()) {
            setY(other.getY());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          lab4.snakes.SnakesProto.GameState.Coord parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (lab4.snakes.SnakesProto.GameState.Coord) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int x_ ;
        /**
         * <code>optional sint32 x = 1 [default = 0];</code>
         *
         * <pre>
         * По горизонтальной оси, положительное направление - вправо
         * </pre>
         */
        public boolean hasX() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional sint32 x = 1 [default = 0];</code>
         *
         * <pre>
         * По горизонтальной оси, положительное направление - вправо
         * </pre>
         */
        public int getX() {
          return x_;
        }
        /**
         * <code>optional sint32 x = 1 [default = 0];</code>
         *
         * <pre>
         * По горизонтальной оси, положительное направление - вправо
         * </pre>
         */
        public Builder setX(int value) {
          bitField0_ |= 0x00000001;
          x_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional sint32 x = 1 [default = 0];</code>
         *
         * <pre>
         * По горизонтальной оси, положительное направление - вправо
         * </pre>
         */
        public Builder clearX() {
          bitField0_ = (bitField0_ & ~0x00000001);
          x_ = 0;
          onChanged();
          return this;
        }

        private int y_ ;
        /**
         * <code>optional sint32 y = 2 [default = 0];</code>
         *
         * <pre>
         * По вертикальной оси, положительное направление - вниз
         * </pre>
         */
        public boolean hasY() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional sint32 y = 2 [default = 0];</code>
         *
         * <pre>
         * По вертикальной оси, положительное направление - вниз
         * </pre>
         */
        public int getY() {
          return y_;
        }
        /**
         * <code>optional sint32 y = 2 [default = 0];</code>
         *
         * <pre>
         * По вертикальной оси, положительное направление - вниз
         * </pre>
         */
        public Builder setY(int value) {
          bitField0_ |= 0x00000002;
          y_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional sint32 y = 2 [default = 0];</code>
         *
         * <pre>
         * По вертикальной оси, положительное направление - вниз
         * </pre>
         */
        public Builder clearY() {
          bitField0_ = (bitField0_ & ~0x00000002);
          y_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:lab4.snakes.GameState.Coord)
      }

      // @@protoc_insertion_point(class_scope:lab4.snakes.GameState.Coord)
      private static final lab4.snakes.SnakesProto.GameState.Coord DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GameState.Coord();
      }

      public static lab4.snakes.SnakesProto.GameState.Coord getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Coord>
          PARSER = new com.google.protobuf.AbstractParser<Coord>() {
        public Coord parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new Coord(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<Coord> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Coord> getParserForType() {
        return PARSER;
      }

      public lab4.snakes.SnakesProto.GameState.Coord getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface SnakeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lab4.snakes.GameState.Snake)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required int32 player_id = 1;</code>
       *
       * <pre>
       * Идентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       */
      boolean hasPlayerId();
      /**
       * <code>required int32 player_id = 1;</code>
       *
       * <pre>
       * Идентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       */
      int getPlayerId();

      /**
       * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
       *
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
       * Последняя точка соответствует хвосту змеи. 
       * </pre>
       */
      java.util.List<lab4.snakes.SnakesProto.GameState.Coord> 
          getPointsList();
      /**
       * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
       *
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
       * Последняя точка соответствует хвосту змеи. 
       * </pre>
       */
      lab4.snakes.SnakesProto.GameState.Coord getPoints(int index);
      /**
       * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
       *
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
       * Последняя точка соответствует хвосту змеи. 
       * </pre>
       */
      int getPointsCount();
      /**
       * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
       *
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
       * Последняя точка соответствует хвосту змеи. 
       * </pre>
       */
      java.util.List<? extends lab4.snakes.SnakesProto.GameState.CoordOrBuilder> 
          getPointsOrBuilderList();
      /**
       * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
       *
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
       * Последняя точка соответствует хвосту змеи. 
       * </pre>
       */
      lab4.snakes.SnakesProto.GameState.CoordOrBuilder getPointsOrBuilder(
          int index);

      /**
       * <code>required .lab4.snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       *
       * <pre>
       * статус змеи в игре
       * </pre>
       */
      boolean hasState();
      /**
       * <code>required .lab4.snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       *
       * <pre>
       * статус змеи в игре
       * </pre>
       */
      lab4.snakes.SnakesProto.GameState.Snake.SnakeState getState();

      /**
       * <code>required .lab4.snakes.Direction head_direction = 4;</code>
       *
       * <pre>
       * Направление, в котором повёрнута голова змейки в текущий момент
       * </pre>
       */
      boolean hasHeadDirection();
      /**
       * <code>required .lab4.snakes.Direction head_direction = 4;</code>
       *
       * <pre>
       * Направление, в котором повёрнута голова змейки в текущий момент
       * </pre>
       */
      lab4.snakes.SnakesProto.Direction getHeadDirection();
    }
    /**
     * Protobuf type {@code lab4.snakes.GameState.Snake}
     *
     * <pre>
     * Змея
     * </pre>
     */
    public  static final class Snake extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:lab4.snakes.GameState.Snake)
        SnakeOrBuilder {
      // Use Snake.newBuilder() to construct.
      private Snake(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Snake() {
        playerId_ = 0;
        points_ = java.util.Collections.emptyList();
        state_ = 0;
        headDirection_ = 1;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Snake(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                playerId_ = input.readInt32();
                break;
              }
              case 18: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  points_ = new java.util.ArrayList<lab4.snakes.SnakesProto.GameState.Coord>();
                  mutable_bitField0_ |= 0x00000002;
                }
                points_.add(input.readMessage(lab4.snakes.SnakesProto.GameState.Coord.parser(), extensionRegistry));
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                lab4.snakes.SnakesProto.GameState.Snake.SnakeState value = lab4.snakes.SnakesProto.GameState.Snake.SnakeState.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(3, rawValue);
                } else {
                  bitField0_ |= 0x00000002;
                  state_ = rawValue;
                }
                break;
              }
              case 32: {
                int rawValue = input.readEnum();
                lab4.snakes.SnakesProto.Direction value = lab4.snakes.SnakesProto.Direction.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(4, rawValue);
                } else {
                  bitField0_ |= 0x00000004;
                  headDirection_ = rawValue;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            points_ = java.util.Collections.unmodifiableList(points_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_Snake_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_Snake_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GameState.Snake.class, lab4.snakes.SnakesProto.GameState.Snake.Builder.class);
      }

      /**
       * Protobuf enum {@code lab4.snakes.GameState.Snake.SnakeState}
       *
       * <pre>
       * Статус змеи в игре
       * </pre>
       */
      public enum SnakeState
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>ALIVE = 0;</code>
         *
         * <pre>
         * Змея управляется игроком
         * </pre>
         */
        ALIVE(0, 0),
        /**
         * <code>ZOMBIE = 1;</code>
         *
         * <pre>
         * Змея принадлежала игроку, который вышел из игры, она продолжает движение куда глаза глядят
         * </pre>
         */
        ZOMBIE(1, 1),
        ;

        /**
         * <code>ALIVE = 0;</code>
         *
         * <pre>
         * Змея управляется игроком
         * </pre>
         */
        public static final int ALIVE_VALUE = 0;
        /**
         * <code>ZOMBIE = 1;</code>
         *
         * <pre>
         * Змея принадлежала игроку, который вышел из игры, она продолжает движение куда глаза глядят
         * </pre>
         */
        public static final int ZOMBIE_VALUE = 1;


        public final int getNumber() {
          return value;
        }

        public static SnakeState valueOf(int value) {
          switch (value) {
            case 0: return ALIVE;
            case 1: return ZOMBIE;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<SnakeState>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            SnakeState> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<SnakeState>() {
                public SnakeState findValueByNumber(int number) {
                  return SnakeState.valueOf(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(index);
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return lab4.snakes.SnakesProto.GameState.Snake.getDescriptor().getEnumTypes().get(0);
        }

        private static final SnakeState[] VALUES = values();

        public static SnakeState valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private SnakeState(int index, int value) {
          this.index = index;
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:lab4.snakes.GameState.Snake.SnakeState)
      }

      private int bitField0_;
      public static final int PLAYER_ID_FIELD_NUMBER = 1;
      private int playerId_;
      /**
       * <code>required int32 player_id = 1;</code>
       *
       * <pre>
       * Идентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       */
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 player_id = 1;</code>
       *
       * <pre>
       * Идентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       */
      public int getPlayerId() {
        return playerId_;
      }

      public static final int POINTS_FIELD_NUMBER = 2;
      private java.util.List<lab4.snakes.SnakesProto.GameState.Coord> points_;
      /**
       * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
       *
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
       * Последняя точка соответствует хвосту змеи. 
       * </pre>
       */
      public java.util.List<lab4.snakes.SnakesProto.GameState.Coord> getPointsList() {
        return points_;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
       *
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
       * Последняя точка соответствует хвосту змеи. 
       * </pre>
       */
      public java.util.List<? extends lab4.snakes.SnakesProto.GameState.CoordOrBuilder> 
          getPointsOrBuilderList() {
        return points_;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
       *
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
       * Последняя точка соответствует хвосту змеи. 
       * </pre>
       */
      public int getPointsCount() {
        return points_.size();
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
       *
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
       * Последняя точка соответствует хвосту змеи. 
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameState.Coord getPoints(int index) {
        return points_.get(index);
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
       *
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
       * Последняя точка соответствует хвосту змеи. 
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameState.CoordOrBuilder getPointsOrBuilder(
          int index) {
        return points_.get(index);
      }

      public static final int STATE_FIELD_NUMBER = 3;
      private int state_;
      /**
       * <code>required .lab4.snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       *
       * <pre>
       * статус змеи в игре
       * </pre>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .lab4.snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       *
       * <pre>
       * статус змеи в игре
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameState.Snake.SnakeState getState() {
        lab4.snakes.SnakesProto.GameState.Snake.SnakeState result = lab4.snakes.SnakesProto.GameState.Snake.SnakeState.valueOf(state_);
        return result == null ? lab4.snakes.SnakesProto.GameState.Snake.SnakeState.ALIVE : result;
      }

      public static final int HEAD_DIRECTION_FIELD_NUMBER = 4;
      private int headDirection_;
      /**
       * <code>required .lab4.snakes.Direction head_direction = 4;</code>
       *
       * <pre>
       * Направление, в котором повёрнута голова змейки в текущий момент
       * </pre>
       */
      public boolean hasHeadDirection() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .lab4.snakes.Direction head_direction = 4;</code>
       *
       * <pre>
       * Направление, в котором повёрнута голова змейки в текущий момент
       * </pre>
       */
      public lab4.snakes.SnakesProto.Direction getHeadDirection() {
        lab4.snakes.SnakesProto.Direction result = lab4.snakes.SnakesProto.Direction.valueOf(headDirection_);
        return result == null ? lab4.snakes.SnakesProto.Direction.UP : result;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasPlayerId()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasState()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasHeadDirection()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, playerId_);
        }
        for (int i = 0; i < points_.size(); i++) {
          output.writeMessage(2, points_.get(i));
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeEnum(3, state_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeEnum(4, headDirection_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, playerId_);
        }
        for (int i = 0; i < points_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, points_.get(i));
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(3, state_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(4, headDirection_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static lab4.snakes.SnakesProto.GameState.Snake parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameState.Snake parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameState.Snake parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameState.Snake parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameState.Snake parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameState.Snake parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameState.Snake parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameState.Snake parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameState.Snake parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameState.Snake parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lab4.snakes.SnakesProto.GameState.Snake prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code lab4.snakes.GameState.Snake}
       *
       * <pre>
       * Змея
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:lab4.snakes.GameState.Snake)
          lab4.snakes.SnakesProto.GameState.SnakeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_Snake_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_Snake_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  lab4.snakes.SnakesProto.GameState.Snake.class, lab4.snakes.SnakesProto.GameState.Snake.Builder.class);
        }

        // Construct using lab4.snakes.SnakesProto.GameState.Snake.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPointsFieldBuilder();
          }
        }
        public Builder clear() {
          super.clear();
          playerId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (pointsBuilder_ == null) {
            points_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            pointsBuilder_.clear();
          }
          state_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          headDirection_ = 1;
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_Snake_descriptor;
        }

        public lab4.snakes.SnakesProto.GameState.Snake getDefaultInstanceForType() {
          return lab4.snakes.SnakesProto.GameState.Snake.getDefaultInstance();
        }

        public lab4.snakes.SnakesProto.GameState.Snake build() {
          lab4.snakes.SnakesProto.GameState.Snake result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public lab4.snakes.SnakesProto.GameState.Snake buildPartial() {
          lab4.snakes.SnakesProto.GameState.Snake result = new lab4.snakes.SnakesProto.GameState.Snake(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.playerId_ = playerId_;
          if (pointsBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
              points_ = java.util.Collections.unmodifiableList(points_);
              bitField0_ = (bitField0_ & ~0x00000002);
            }
            result.points_ = points_;
          } else {
            result.points_ = pointsBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000002;
          }
          result.state_ = state_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000004;
          }
          result.headDirection_ = headDirection_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof lab4.snakes.SnakesProto.GameState.Snake) {
            return mergeFrom((lab4.snakes.SnakesProto.GameState.Snake)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(lab4.snakes.SnakesProto.GameState.Snake other) {
          if (other == lab4.snakes.SnakesProto.GameState.Snake.getDefaultInstance()) return this;
          if (other.hasPlayerId()) {
            setPlayerId(other.getPlayerId());
          }
          if (pointsBuilder_ == null) {
            if (!other.points_.isEmpty()) {
              if (points_.isEmpty()) {
                points_ = other.points_;
                bitField0_ = (bitField0_ & ~0x00000002);
              } else {
                ensurePointsIsMutable();
                points_.addAll(other.points_);
              }
              onChanged();
            }
          } else {
            if (!other.points_.isEmpty()) {
              if (pointsBuilder_.isEmpty()) {
                pointsBuilder_.dispose();
                pointsBuilder_ = null;
                points_ = other.points_;
                bitField0_ = (bitField0_ & ~0x00000002);
                pointsBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getPointsFieldBuilder() : null;
              } else {
                pointsBuilder_.addAllMessages(other.points_);
              }
            }
          }
          if (other.hasState()) {
            setState(other.getState());
          }
          if (other.hasHeadDirection()) {
            setHeadDirection(other.getHeadDirection());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasPlayerId()) {
            return false;
          }
          if (!hasState()) {
            return false;
          }
          if (!hasHeadDirection()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          lab4.snakes.SnakesProto.GameState.Snake parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (lab4.snakes.SnakesProto.GameState.Snake) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int playerId_ ;
        /**
         * <code>required int32 player_id = 1;</code>
         *
         * <pre>
         * Идентификатор игрока-владельца змеи, см. GamePlayer.id
         * </pre>
         */
        public boolean hasPlayerId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required int32 player_id = 1;</code>
         *
         * <pre>
         * Идентификатор игрока-владельца змеи, см. GamePlayer.id
         * </pre>
         */
        public int getPlayerId() {
          return playerId_;
        }
        /**
         * <code>required int32 player_id = 1;</code>
         *
         * <pre>
         * Идентификатор игрока-владельца змеи, см. GamePlayer.id
         * </pre>
         */
        public Builder setPlayerId(int value) {
          bitField0_ |= 0x00000001;
          playerId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 player_id = 1;</code>
         *
         * <pre>
         * Идентификатор игрока-владельца змеи, см. GamePlayer.id
         * </pre>
         */
        public Builder clearPlayerId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          playerId_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<lab4.snakes.SnakesProto.GameState.Coord> points_ =
          java.util.Collections.emptyList();
        private void ensurePointsIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            points_ = new java.util.ArrayList<lab4.snakes.SnakesProto.GameState.Coord>(points_);
            bitField0_ |= 0x00000002;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            lab4.snakes.SnakesProto.GameState.Coord, lab4.snakes.SnakesProto.GameState.Coord.Builder, lab4.snakes.SnakesProto.GameState.CoordOrBuilder> pointsBuilder_;

        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public java.util.List<lab4.snakes.SnakesProto.GameState.Coord> getPointsList() {
          if (pointsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(points_);
          } else {
            return pointsBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public int getPointsCount() {
          if (pointsBuilder_ == null) {
            return points_.size();
          } else {
            return pointsBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public lab4.snakes.SnakesProto.GameState.Coord getPoints(int index) {
          if (pointsBuilder_ == null) {
            return points_.get(index);
          } else {
            return pointsBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public Builder setPoints(
            int index, lab4.snakes.SnakesProto.GameState.Coord value) {
          if (pointsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensurePointsIsMutable();
            points_.set(index, value);
            onChanged();
          } else {
            pointsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public Builder setPoints(
            int index, lab4.snakes.SnakesProto.GameState.Coord.Builder builderForValue) {
          if (pointsBuilder_ == null) {
            ensurePointsIsMutable();
            points_.set(index, builderForValue.build());
            onChanged();
          } else {
            pointsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public Builder addPoints(lab4.snakes.SnakesProto.GameState.Coord value) {
          if (pointsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensurePointsIsMutable();
            points_.add(value);
            onChanged();
          } else {
            pointsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public Builder addPoints(
            int index, lab4.snakes.SnakesProto.GameState.Coord value) {
          if (pointsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensurePointsIsMutable();
            points_.add(index, value);
            onChanged();
          } else {
            pointsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public Builder addPoints(
            lab4.snakes.SnakesProto.GameState.Coord.Builder builderForValue) {
          if (pointsBuilder_ == null) {
            ensurePointsIsMutable();
            points_.add(builderForValue.build());
            onChanged();
          } else {
            pointsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public Builder addPoints(
            int index, lab4.snakes.SnakesProto.GameState.Coord.Builder builderForValue) {
          if (pointsBuilder_ == null) {
            ensurePointsIsMutable();
            points_.add(index, builderForValue.build());
            onChanged();
          } else {
            pointsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public Builder addAllPoints(
            java.lang.Iterable<? extends lab4.snakes.SnakesProto.GameState.Coord> values) {
          if (pointsBuilder_ == null) {
            ensurePointsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, points_);
            onChanged();
          } else {
            pointsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public Builder clearPoints() {
          if (pointsBuilder_ == null) {
            points_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
          } else {
            pointsBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public Builder removePoints(int index) {
          if (pointsBuilder_ == null) {
            ensurePointsIsMutable();
            points_.remove(index);
            onChanged();
          } else {
            pointsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public lab4.snakes.SnakesProto.GameState.Coord.Builder getPointsBuilder(
            int index) {
          return getPointsFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public lab4.snakes.SnakesProto.GameState.CoordOrBuilder getPointsOrBuilder(
            int index) {
          if (pointsBuilder_ == null) {
            return points_.get(index);  } else {
            return pointsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public java.util.List<? extends lab4.snakes.SnakesProto.GameState.CoordOrBuilder> 
             getPointsOrBuilderList() {
          if (pointsBuilder_ != null) {
            return pointsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(points_);
          }
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public lab4.snakes.SnakesProto.GameState.Coord.Builder addPointsBuilder() {
          return getPointsFieldBuilder().addBuilder(
              lab4.snakes.SnakesProto.GameState.Coord.getDefaultInstance());
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public lab4.snakes.SnakesProto.GameState.Coord.Builder addPointsBuilder(
            int index) {
          return getPointsFieldBuilder().addBuilder(
              index, lab4.snakes.SnakesProto.GameState.Coord.getDefaultInstance());
        }
        /**
         * <code>repeated .lab4.snakes.GameState.Coord points = 2;</code>
         *
         * <pre>
         * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. 
         * </pre>
         */
        public java.util.List<lab4.snakes.SnakesProto.GameState.Coord.Builder> 
             getPointsBuilderList() {
          return getPointsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            lab4.snakes.SnakesProto.GameState.Coord, lab4.snakes.SnakesProto.GameState.Coord.Builder, lab4.snakes.SnakesProto.GameState.CoordOrBuilder> 
            getPointsFieldBuilder() {
          if (pointsBuilder_ == null) {
            pointsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                lab4.snakes.SnakesProto.GameState.Coord, lab4.snakes.SnakesProto.GameState.Coord.Builder, lab4.snakes.SnakesProto.GameState.CoordOrBuilder>(
                    points_,
                    ((bitField0_ & 0x00000002) == 0x00000002),
                    getParentForChildren(),
                    isClean());
            points_ = null;
          }
          return pointsBuilder_;
        }

        private int state_ = 0;
        /**
         * <code>required .lab4.snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
         *
         * <pre>
         * статус змеи в игре
         * </pre>
         */
        public boolean hasState() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required .lab4.snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
         *
         * <pre>
         * статус змеи в игре
         * </pre>
         */
        public lab4.snakes.SnakesProto.GameState.Snake.SnakeState getState() {
          lab4.snakes.SnakesProto.GameState.Snake.SnakeState result = lab4.snakes.SnakesProto.GameState.Snake.SnakeState.valueOf(state_);
          return result == null ? lab4.snakes.SnakesProto.GameState.Snake.SnakeState.ALIVE : result;
        }
        /**
         * <code>required .lab4.snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
         *
         * <pre>
         * статус змеи в игре
         * </pre>
         */
        public Builder setState(lab4.snakes.SnakesProto.GameState.Snake.SnakeState value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000004;
          state_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>required .lab4.snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
         *
         * <pre>
         * статус змеи в игре
         * </pre>
         */
        public Builder clearState() {
          bitField0_ = (bitField0_ & ~0x00000004);
          state_ = 0;
          onChanged();
          return this;
        }

        private int headDirection_ = 1;
        /**
         * <code>required .lab4.snakes.Direction head_direction = 4;</code>
         *
         * <pre>
         * Направление, в котором повёрнута голова змейки в текущий момент
         * </pre>
         */
        public boolean hasHeadDirection() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>required .lab4.snakes.Direction head_direction = 4;</code>
         *
         * <pre>
         * Направление, в котором повёрнута голова змейки в текущий момент
         * </pre>
         */
        public lab4.snakes.SnakesProto.Direction getHeadDirection() {
          lab4.snakes.SnakesProto.Direction result = lab4.snakes.SnakesProto.Direction.valueOf(headDirection_);
          return result == null ? lab4.snakes.SnakesProto.Direction.UP : result;
        }
        /**
         * <code>required .lab4.snakes.Direction head_direction = 4;</code>
         *
         * <pre>
         * Направление, в котором повёрнута голова змейки в текущий момент
         * </pre>
         */
        public Builder setHeadDirection(lab4.snakes.SnakesProto.Direction value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000008;
          headDirection_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>required .lab4.snakes.Direction head_direction = 4;</code>
         *
         * <pre>
         * Направление, в котором повёрнута голова змейки в текущий момент
         * </pre>
         */
        public Builder clearHeadDirection() {
          bitField0_ = (bitField0_ & ~0x00000008);
          headDirection_ = 1;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:lab4.snakes.GameState.Snake)
      }

      // @@protoc_insertion_point(class_scope:lab4.snakes.GameState.Snake)
      private static final lab4.snakes.SnakesProto.GameState.Snake DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GameState.Snake();
      }

      public static lab4.snakes.SnakesProto.GameState.Snake getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Snake>
          PARSER = new com.google.protobuf.AbstractParser<Snake>() {
        public Snake parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new Snake(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<Snake> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Snake> getParserForType() {
        return PARSER;
      }

      public lab4.snakes.SnakesProto.GameState.Snake getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int STATE_ORDER_FIELD_NUMBER = 1;
    private int stateOrder_;
    /**
     * <code>required int32 state_order = 1;</code>
     *
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     */
    public boolean hasStateOrder() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 state_order = 1;</code>
     *
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     */
    public int getStateOrder() {
      return stateOrder_;
    }

    public static final int SNAKES_FIELD_NUMBER = 2;
    private java.util.List<lab4.snakes.SnakesProto.GameState.Snake> snakes_;
    /**
     * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
     *
     * <pre>
     * Список змей
     * </pre>
     */
    public java.util.List<lab4.snakes.SnakesProto.GameState.Snake> getSnakesList() {
      return snakes_;
    }
    /**
     * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
     *
     * <pre>
     * Список змей
     * </pre>
     */
    public java.util.List<? extends lab4.snakes.SnakesProto.GameState.SnakeOrBuilder> 
        getSnakesOrBuilderList() {
      return snakes_;
    }
    /**
     * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
     *
     * <pre>
     * Список змей
     * </pre>
     */
    public int getSnakesCount() {
      return snakes_.size();
    }
    /**
     * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
     *
     * <pre>
     * Список змей
     * </pre>
     */
    public lab4.snakes.SnakesProto.GameState.Snake getSnakes(int index) {
      return snakes_.get(index);
    }
    /**
     * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
     *
     * <pre>
     * Список змей
     * </pre>
     */
    public lab4.snakes.SnakesProto.GameState.SnakeOrBuilder getSnakesOrBuilder(
        int index) {
      return snakes_.get(index);
    }

    public static final int FOODS_FIELD_NUMBER = 3;
    private java.util.List<lab4.snakes.SnakesProto.GameState.Coord> foods_;
    /**
     * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
     *
     * <pre>
     * Список клеток с едой
     * </pre>
     */
    public java.util.List<lab4.snakes.SnakesProto.GameState.Coord> getFoodsList() {
      return foods_;
    }
    /**
     * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
     *
     * <pre>
     * Список клеток с едой
     * </pre>
     */
    public java.util.List<? extends lab4.snakes.SnakesProto.GameState.CoordOrBuilder> 
        getFoodsOrBuilderList() {
      return foods_;
    }
    /**
     * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
     *
     * <pre>
     * Список клеток с едой
     * </pre>
     */
    public int getFoodsCount() {
      return foods_.size();
    }
    /**
     * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
     *
     * <pre>
     * Список клеток с едой
     * </pre>
     */
    public lab4.snakes.SnakesProto.GameState.Coord getFoods(int index) {
      return foods_.get(index);
    }
    /**
     * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
     *
     * <pre>
     * Список клеток с едой
     * </pre>
     */
    public lab4.snakes.SnakesProto.GameState.CoordOrBuilder getFoodsOrBuilder(
        int index) {
      return foods_.get(index);
    }

    public static final int PLAYERS_FIELD_NUMBER = 4;
    private lab4.snakes.SnakesProto.GamePlayers players_;
    /**
     * <code>required .lab4.snakes.GamePlayers players = 4;</code>
     *
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     */
    public boolean hasPlayers() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .lab4.snakes.GamePlayers players = 4;</code>
     *
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     */
    public lab4.snakes.SnakesProto.GamePlayers getPlayers() {
      return players_ == null ? lab4.snakes.SnakesProto.GamePlayers.getDefaultInstance() : players_;
    }
    /**
     * <code>required .lab4.snakes.GamePlayers players = 4;</code>
     *
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     */
    public lab4.snakes.SnakesProto.GamePlayersOrBuilder getPlayersOrBuilder() {
      return players_ == null ? lab4.snakes.SnakesProto.GamePlayers.getDefaultInstance() : players_;
    }

    public static final int CONFIG_FIELD_NUMBER = 5;
    private lab4.snakes.SnakesProto.GameConfig config_;
    /**
     * <code>required .lab4.snakes.GameConfig config = 5;</code>
     *
     * <pre>
     * Параметры игры
     * </pre>
     */
    public boolean hasConfig() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .lab4.snakes.GameConfig config = 5;</code>
     *
     * <pre>
     * Параметры игры
     * </pre>
     */
    public lab4.snakes.SnakesProto.GameConfig getConfig() {
      return config_ == null ? lab4.snakes.SnakesProto.GameConfig.getDefaultInstance() : config_;
    }
    /**
     * <code>required .lab4.snakes.GameConfig config = 5;</code>
     *
     * <pre>
     * Параметры игры
     * </pre>
     */
    public lab4.snakes.SnakesProto.GameConfigOrBuilder getConfigOrBuilder() {
      return config_ == null ? lab4.snakes.SnakesProto.GameConfig.getDefaultInstance() : config_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasStateOrder()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPlayers()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasConfig()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSnakesCount(); i++) {
        if (!getSnakes(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getPlayers().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, stateOrder_);
      }
      for (int i = 0; i < snakes_.size(); i++) {
        output.writeMessage(2, snakes_.get(i));
      }
      for (int i = 0; i < foods_.size(); i++) {
        output.writeMessage(3, foods_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(4, getPlayers());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(5, getConfig());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, stateOrder_);
      }
      for (int i = 0; i < snakes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, snakes_.get(i));
      }
      for (int i = 0; i < foods_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, foods_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getPlayers());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getConfig());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static lab4.snakes.SnakesProto.GameState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static lab4.snakes.SnakesProto.GameState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GameState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static lab4.snakes.SnakesProto.GameState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GameState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static lab4.snakes.SnakesProto.GameState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GameState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static lab4.snakes.SnakesProto.GameState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GameState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static lab4.snakes.SnakesProto.GameState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lab4.snakes.SnakesProto.GameState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lab4.snakes.GameState}
     *
     * <pre>
     * Текущее состояние игрового поля 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:lab4.snakes.GameState)
        lab4.snakes.SnakesProto.GameStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GameState.class, lab4.snakes.SnakesProto.GameState.Builder.class);
      }

      // Construct using lab4.snakes.SnakesProto.GameState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSnakesFieldBuilder();
          getFoodsFieldBuilder();
          getPlayersFieldBuilder();
          getConfigFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        stateOrder_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (snakesBuilder_ == null) {
          snakes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          snakesBuilder_.clear();
        }
        if (foodsBuilder_ == null) {
          foods_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          foodsBuilder_.clear();
        }
        if (playersBuilder_ == null) {
          players_ = null;
        } else {
          playersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (configBuilder_ == null) {
          config_ = null;
        } else {
          configBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameState_descriptor;
      }

      public lab4.snakes.SnakesProto.GameState getDefaultInstanceForType() {
        return lab4.snakes.SnakesProto.GameState.getDefaultInstance();
      }

      public lab4.snakes.SnakesProto.GameState build() {
        lab4.snakes.SnakesProto.GameState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public lab4.snakes.SnakesProto.GameState buildPartial() {
        lab4.snakes.SnakesProto.GameState result = new lab4.snakes.SnakesProto.GameState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.stateOrder_ = stateOrder_;
        if (snakesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            snakes_ = java.util.Collections.unmodifiableList(snakes_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.snakes_ = snakes_;
        } else {
          result.snakes_ = snakesBuilder_.build();
        }
        if (foodsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            foods_ = java.util.Collections.unmodifiableList(foods_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.foods_ = foods_;
        } else {
          result.foods_ = foodsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        if (playersBuilder_ == null) {
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        if (configBuilder_ == null) {
          result.config_ = config_;
        } else {
          result.config_ = configBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof lab4.snakes.SnakesProto.GameState) {
          return mergeFrom((lab4.snakes.SnakesProto.GameState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(lab4.snakes.SnakesProto.GameState other) {
        if (other == lab4.snakes.SnakesProto.GameState.getDefaultInstance()) return this;
        if (other.hasStateOrder()) {
          setStateOrder(other.getStateOrder());
        }
        if (snakesBuilder_ == null) {
          if (!other.snakes_.isEmpty()) {
            if (snakes_.isEmpty()) {
              snakes_ = other.snakes_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSnakesIsMutable();
              snakes_.addAll(other.snakes_);
            }
            onChanged();
          }
        } else {
          if (!other.snakes_.isEmpty()) {
            if (snakesBuilder_.isEmpty()) {
              snakesBuilder_.dispose();
              snakesBuilder_ = null;
              snakes_ = other.snakes_;
              bitField0_ = (bitField0_ & ~0x00000002);
              snakesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSnakesFieldBuilder() : null;
            } else {
              snakesBuilder_.addAllMessages(other.snakes_);
            }
          }
        }
        if (foodsBuilder_ == null) {
          if (!other.foods_.isEmpty()) {
            if (foods_.isEmpty()) {
              foods_ = other.foods_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureFoodsIsMutable();
              foods_.addAll(other.foods_);
            }
            onChanged();
          }
        } else {
          if (!other.foods_.isEmpty()) {
            if (foodsBuilder_.isEmpty()) {
              foodsBuilder_.dispose();
              foodsBuilder_ = null;
              foods_ = other.foods_;
              bitField0_ = (bitField0_ & ~0x00000004);
              foodsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFoodsFieldBuilder() : null;
            } else {
              foodsBuilder_.addAllMessages(other.foods_);
            }
          }
        }
        if (other.hasPlayers()) {
          mergePlayers(other.getPlayers());
        }
        if (other.hasConfig()) {
          mergeConfig(other.getConfig());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasStateOrder()) {
          return false;
        }
        if (!hasPlayers()) {
          return false;
        }
        if (!hasConfig()) {
          return false;
        }
        for (int i = 0; i < getSnakesCount(); i++) {
          if (!getSnakes(i).isInitialized()) {
            return false;
          }
        }
        if (!getPlayers().isInitialized()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        lab4.snakes.SnakesProto.GameState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (lab4.snakes.SnakesProto.GameState) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int stateOrder_ ;
      /**
       * <code>required int32 state_order = 1;</code>
       *
       * <pre>
       * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
       * </pre>
       */
      public boolean hasStateOrder() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 state_order = 1;</code>
       *
       * <pre>
       * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
       * </pre>
       */
      public int getStateOrder() {
        return stateOrder_;
      }
      /**
       * <code>required int32 state_order = 1;</code>
       *
       * <pre>
       * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
       * </pre>
       */
      public Builder setStateOrder(int value) {
        bitField0_ |= 0x00000001;
        stateOrder_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 state_order = 1;</code>
       *
       * <pre>
       * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
       * </pre>
       */
      public Builder clearStateOrder() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stateOrder_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<lab4.snakes.SnakesProto.GameState.Snake> snakes_ =
        java.util.Collections.emptyList();
      private void ensureSnakesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          snakes_ = new java.util.ArrayList<lab4.snakes.SnakesProto.GameState.Snake>(snakes_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          lab4.snakes.SnakesProto.GameState.Snake, lab4.snakes.SnakesProto.GameState.Snake.Builder, lab4.snakes.SnakesProto.GameState.SnakeOrBuilder> snakesBuilder_;

      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public java.util.List<lab4.snakes.SnakesProto.GameState.Snake> getSnakesList() {
        if (snakesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(snakes_);
        } else {
          return snakesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public int getSnakesCount() {
        if (snakesBuilder_ == null) {
          return snakes_.size();
        } else {
          return snakesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameState.Snake getSnakes(int index) {
        if (snakesBuilder_ == null) {
          return snakes_.get(index);
        } else {
          return snakesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public Builder setSnakes(
          int index, lab4.snakes.SnakesProto.GameState.Snake value) {
        if (snakesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSnakesIsMutable();
          snakes_.set(index, value);
          onChanged();
        } else {
          snakesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public Builder setSnakes(
          int index, lab4.snakes.SnakesProto.GameState.Snake.Builder builderForValue) {
        if (snakesBuilder_ == null) {
          ensureSnakesIsMutable();
          snakes_.set(index, builderForValue.build());
          onChanged();
        } else {
          snakesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public Builder addSnakes(lab4.snakes.SnakesProto.GameState.Snake value) {
        if (snakesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSnakesIsMutable();
          snakes_.add(value);
          onChanged();
        } else {
          snakesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public Builder addSnakes(
          int index, lab4.snakes.SnakesProto.GameState.Snake value) {
        if (snakesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSnakesIsMutable();
          snakes_.add(index, value);
          onChanged();
        } else {
          snakesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public Builder addSnakes(
          lab4.snakes.SnakesProto.GameState.Snake.Builder builderForValue) {
        if (snakesBuilder_ == null) {
          ensureSnakesIsMutable();
          snakes_.add(builderForValue.build());
          onChanged();
        } else {
          snakesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public Builder addSnakes(
          int index, lab4.snakes.SnakesProto.GameState.Snake.Builder builderForValue) {
        if (snakesBuilder_ == null) {
          ensureSnakesIsMutable();
          snakes_.add(index, builderForValue.build());
          onChanged();
        } else {
          snakesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public Builder addAllSnakes(
          java.lang.Iterable<? extends lab4.snakes.SnakesProto.GameState.Snake> values) {
        if (snakesBuilder_ == null) {
          ensureSnakesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, snakes_);
          onChanged();
        } else {
          snakesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public Builder clearSnakes() {
        if (snakesBuilder_ == null) {
          snakes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          snakesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public Builder removeSnakes(int index) {
        if (snakesBuilder_ == null) {
          ensureSnakesIsMutable();
          snakes_.remove(index);
          onChanged();
        } else {
          snakesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameState.Snake.Builder getSnakesBuilder(
          int index) {
        return getSnakesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameState.SnakeOrBuilder getSnakesOrBuilder(
          int index) {
        if (snakesBuilder_ == null) {
          return snakes_.get(index);  } else {
          return snakesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public java.util.List<? extends lab4.snakes.SnakesProto.GameState.SnakeOrBuilder> 
           getSnakesOrBuilderList() {
        if (snakesBuilder_ != null) {
          return snakesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(snakes_);
        }
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameState.Snake.Builder addSnakesBuilder() {
        return getSnakesFieldBuilder().addBuilder(
            lab4.snakes.SnakesProto.GameState.Snake.getDefaultInstance());
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameState.Snake.Builder addSnakesBuilder(
          int index) {
        return getSnakesFieldBuilder().addBuilder(
            index, lab4.snakes.SnakesProto.GameState.Snake.getDefaultInstance());
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Snake snakes = 2;</code>
       *
       * <pre>
       * Список змей
       * </pre>
       */
      public java.util.List<lab4.snakes.SnakesProto.GameState.Snake.Builder> 
           getSnakesBuilderList() {
        return getSnakesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          lab4.snakes.SnakesProto.GameState.Snake, lab4.snakes.SnakesProto.GameState.Snake.Builder, lab4.snakes.SnakesProto.GameState.SnakeOrBuilder> 
          getSnakesFieldBuilder() {
        if (snakesBuilder_ == null) {
          snakesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              lab4.snakes.SnakesProto.GameState.Snake, lab4.snakes.SnakesProto.GameState.Snake.Builder, lab4.snakes.SnakesProto.GameState.SnakeOrBuilder>(
                  snakes_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          snakes_ = null;
        }
        return snakesBuilder_;
      }

      private java.util.List<lab4.snakes.SnakesProto.GameState.Coord> foods_ =
        java.util.Collections.emptyList();
      private void ensureFoodsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          foods_ = new java.util.ArrayList<lab4.snakes.SnakesProto.GameState.Coord>(foods_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          lab4.snakes.SnakesProto.GameState.Coord, lab4.snakes.SnakesProto.GameState.Coord.Builder, lab4.snakes.SnakesProto.GameState.CoordOrBuilder> foodsBuilder_;

      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public java.util.List<lab4.snakes.SnakesProto.GameState.Coord> getFoodsList() {
        if (foodsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(foods_);
        } else {
          return foodsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public int getFoodsCount() {
        if (foodsBuilder_ == null) {
          return foods_.size();
        } else {
          return foodsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameState.Coord getFoods(int index) {
        if (foodsBuilder_ == null) {
          return foods_.get(index);
        } else {
          return foodsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public Builder setFoods(
          int index, lab4.snakes.SnakesProto.GameState.Coord value) {
        if (foodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFoodsIsMutable();
          foods_.set(index, value);
          onChanged();
        } else {
          foodsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public Builder setFoods(
          int index, lab4.snakes.SnakesProto.GameState.Coord.Builder builderForValue) {
        if (foodsBuilder_ == null) {
          ensureFoodsIsMutable();
          foods_.set(index, builderForValue.build());
          onChanged();
        } else {
          foodsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public Builder addFoods(lab4.snakes.SnakesProto.GameState.Coord value) {
        if (foodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFoodsIsMutable();
          foods_.add(value);
          onChanged();
        } else {
          foodsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public Builder addFoods(
          int index, lab4.snakes.SnakesProto.GameState.Coord value) {
        if (foodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFoodsIsMutable();
          foods_.add(index, value);
          onChanged();
        } else {
          foodsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public Builder addFoods(
          lab4.snakes.SnakesProto.GameState.Coord.Builder builderForValue) {
        if (foodsBuilder_ == null) {
          ensureFoodsIsMutable();
          foods_.add(builderForValue.build());
          onChanged();
        } else {
          foodsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public Builder addFoods(
          int index, lab4.snakes.SnakesProto.GameState.Coord.Builder builderForValue) {
        if (foodsBuilder_ == null) {
          ensureFoodsIsMutable();
          foods_.add(index, builderForValue.build());
          onChanged();
        } else {
          foodsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public Builder addAllFoods(
          java.lang.Iterable<? extends lab4.snakes.SnakesProto.GameState.Coord> values) {
        if (foodsBuilder_ == null) {
          ensureFoodsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, foods_);
          onChanged();
        } else {
          foodsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public Builder clearFoods() {
        if (foodsBuilder_ == null) {
          foods_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          foodsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public Builder removeFoods(int index) {
        if (foodsBuilder_ == null) {
          ensureFoodsIsMutable();
          foods_.remove(index);
          onChanged();
        } else {
          foodsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameState.Coord.Builder getFoodsBuilder(
          int index) {
        return getFoodsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameState.CoordOrBuilder getFoodsOrBuilder(
          int index) {
        if (foodsBuilder_ == null) {
          return foods_.get(index);  } else {
          return foodsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public java.util.List<? extends lab4.snakes.SnakesProto.GameState.CoordOrBuilder> 
           getFoodsOrBuilderList() {
        if (foodsBuilder_ != null) {
          return foodsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(foods_);
        }
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameState.Coord.Builder addFoodsBuilder() {
        return getFoodsFieldBuilder().addBuilder(
            lab4.snakes.SnakesProto.GameState.Coord.getDefaultInstance());
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameState.Coord.Builder addFoodsBuilder(
          int index) {
        return getFoodsFieldBuilder().addBuilder(
            index, lab4.snakes.SnakesProto.GameState.Coord.getDefaultInstance());
      }
      /**
       * <code>repeated .lab4.snakes.GameState.Coord foods = 3;</code>
       *
       * <pre>
       * Список клеток с едой
       * </pre>
       */
      public java.util.List<lab4.snakes.SnakesProto.GameState.Coord.Builder> 
           getFoodsBuilderList() {
        return getFoodsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          lab4.snakes.SnakesProto.GameState.Coord, lab4.snakes.SnakesProto.GameState.Coord.Builder, lab4.snakes.SnakesProto.GameState.CoordOrBuilder> 
          getFoodsFieldBuilder() {
        if (foodsBuilder_ == null) {
          foodsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              lab4.snakes.SnakesProto.GameState.Coord, lab4.snakes.SnakesProto.GameState.Coord.Builder, lab4.snakes.SnakesProto.GameState.CoordOrBuilder>(
                  foods_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          foods_ = null;
        }
        return foodsBuilder_;
      }

      private lab4.snakes.SnakesProto.GamePlayers players_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GamePlayers, lab4.snakes.SnakesProto.GamePlayers.Builder, lab4.snakes.SnakesProto.GamePlayersOrBuilder> playersBuilder_;
      /**
       * <code>required .lab4.snakes.GamePlayers players = 4;</code>
       *
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       */
      public boolean hasPlayers() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .lab4.snakes.GamePlayers players = 4;</code>
       *
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       */
      public lab4.snakes.SnakesProto.GamePlayers getPlayers() {
        if (playersBuilder_ == null) {
          return players_ == null ? lab4.snakes.SnakesProto.GamePlayers.getDefaultInstance() : players_;
        } else {
          return playersBuilder_.getMessage();
        }
      }
      /**
       * <code>required .lab4.snakes.GamePlayers players = 4;</code>
       *
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       */
      public Builder setPlayers(lab4.snakes.SnakesProto.GamePlayers value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          players_ = value;
          onChanged();
        } else {
          playersBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .lab4.snakes.GamePlayers players = 4;</code>
       *
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       */
      public Builder setPlayers(
          lab4.snakes.SnakesProto.GamePlayers.Builder builderForValue) {
        if (playersBuilder_ == null) {
          players_ = builderForValue.build();
          onChanged();
        } else {
          playersBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .lab4.snakes.GamePlayers players = 4;</code>
       *
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       */
      public Builder mergePlayers(lab4.snakes.SnakesProto.GamePlayers value) {
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              players_ != null &&
              players_ != lab4.snakes.SnakesProto.GamePlayers.getDefaultInstance()) {
            players_ =
              lab4.snakes.SnakesProto.GamePlayers.newBuilder(players_).mergeFrom(value).buildPartial();
          } else {
            players_ = value;
          }
          onChanged();
        } else {
          playersBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .lab4.snakes.GamePlayers players = 4;</code>
       *
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = null;
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>required .lab4.snakes.GamePlayers players = 4;</code>
       *
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       */
      public lab4.snakes.SnakesProto.GamePlayers.Builder getPlayersBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getPlayersFieldBuilder().getBuilder();
      }
      /**
       * <code>required .lab4.snakes.GamePlayers players = 4;</code>
       *
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       */
      public lab4.snakes.SnakesProto.GamePlayersOrBuilder getPlayersOrBuilder() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilder();
        } else {
          return players_ == null ?
              lab4.snakes.SnakesProto.GamePlayers.getDefaultInstance() : players_;
        }
      }
      /**
       * <code>required .lab4.snakes.GamePlayers players = 4;</code>
       *
       * <pre>
       * Актуальнейший список игроков
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GamePlayers, lab4.snakes.SnakesProto.GamePlayers.Builder, lab4.snakes.SnakesProto.GamePlayersOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              lab4.snakes.SnakesProto.GamePlayers, lab4.snakes.SnakesProto.GamePlayers.Builder, lab4.snakes.SnakesProto.GamePlayersOrBuilder>(
                  getPlayers(),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      private lab4.snakes.SnakesProto.GameConfig config_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameConfig, lab4.snakes.SnakesProto.GameConfig.Builder, lab4.snakes.SnakesProto.GameConfigOrBuilder> configBuilder_;
      /**
       * <code>required .lab4.snakes.GameConfig config = 5;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      public boolean hasConfig() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required .lab4.snakes.GameConfig config = 5;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameConfig getConfig() {
        if (configBuilder_ == null) {
          return config_ == null ? lab4.snakes.SnakesProto.GameConfig.getDefaultInstance() : config_;
        } else {
          return configBuilder_.getMessage();
        }
      }
      /**
       * <code>required .lab4.snakes.GameConfig config = 5;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      public Builder setConfig(lab4.snakes.SnakesProto.GameConfig value) {
        if (configBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          config_ = value;
          onChanged();
        } else {
          configBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .lab4.snakes.GameConfig config = 5;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      public Builder setConfig(
          lab4.snakes.SnakesProto.GameConfig.Builder builderForValue) {
        if (configBuilder_ == null) {
          config_ = builderForValue.build();
          onChanged();
        } else {
          configBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .lab4.snakes.GameConfig config = 5;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      public Builder mergeConfig(lab4.snakes.SnakesProto.GameConfig value) {
        if (configBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              config_ != null &&
              config_ != lab4.snakes.SnakesProto.GameConfig.getDefaultInstance()) {
            config_ =
              lab4.snakes.SnakesProto.GameConfig.newBuilder(config_).mergeFrom(value).buildPartial();
          } else {
            config_ = value;
          }
          onChanged();
        } else {
          configBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .lab4.snakes.GameConfig config = 5;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      public Builder clearConfig() {
        if (configBuilder_ == null) {
          config_ = null;
          onChanged();
        } else {
          configBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>required .lab4.snakes.GameConfig config = 5;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameConfig.Builder getConfigBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>required .lab4.snakes.GameConfig config = 5;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameConfigOrBuilder getConfigOrBuilder() {
        if (configBuilder_ != null) {
          return configBuilder_.getMessageOrBuilder();
        } else {
          return config_ == null ?
              lab4.snakes.SnakesProto.GameConfig.getDefaultInstance() : config_;
        }
      }
      /**
       * <code>required .lab4.snakes.GameConfig config = 5;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameConfig, lab4.snakes.SnakesProto.GameConfig.Builder, lab4.snakes.SnakesProto.GameConfigOrBuilder> 
          getConfigFieldBuilder() {
        if (configBuilder_ == null) {
          configBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              lab4.snakes.SnakesProto.GameConfig, lab4.snakes.SnakesProto.GameConfig.Builder, lab4.snakes.SnakesProto.GameConfigOrBuilder>(
                  getConfig(),
                  getParentForChildren(),
                  isClean());
          config_ = null;
        }
        return configBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:lab4.snakes.GameState)
    }

    // @@protoc_insertion_point(class_scope:lab4.snakes.GameState)
    private static final lab4.snakes.SnakesProto.GameState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GameState();
    }

    public static lab4.snakes.SnakesProto.GameState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<GameState>
        PARSER = new com.google.protobuf.AbstractParser<GameState>() {
      public GameState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new GameState(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<GameState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GameState> getParserForType() {
      return PARSER;
    }

    public lab4.snakes.SnakesProto.GameState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GameMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lab4.snakes.GameMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int64 msg_seq = 1;</code>
     *
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     */
    boolean hasMsgSeq();
    /**
     * <code>required int64 msg_seq = 1;</code>
     *
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     */
    long getMsgSeq();

    /**
     * <code>optional int32 sender_id = 10;</code>
     *
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     */
    boolean hasSenderId();
    /**
     * <code>optional int32 sender_id = 10;</code>
     *
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     */
    int getSenderId();

    /**
     * <code>optional int32 receiver_id = 11;</code>
     *
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     */
    boolean hasReceiverId();
    /**
     * <code>optional int32 receiver_id = 11;</code>
     *
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     */
    int getReceiverId();

    /**
     * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    boolean hasPing();
    /**
     * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.PingMsg getPing();
    /**
     * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.PingMsgOrBuilder getPingOrBuilder();

    /**
     * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    boolean hasSteer();
    /**
     * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.SteerMsg getSteer();
    /**
     * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.SteerMsgOrBuilder getSteerOrBuilder();

    /**
     * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    boolean hasAck();
    /**
     * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.AckMsg getAck();
    /**
     * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.AckMsgOrBuilder getAckOrBuilder();

    /**
     * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
     */
    boolean hasState();
    /**
     * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.StateMsg getState();
    /**
     * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.StateMsgOrBuilder getStateOrBuilder();

    /**
     * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    boolean hasAnnouncement();
    /**
     * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg getAnnouncement();
    /**
     * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.AnnouncementMsgOrBuilder getAnnouncementOrBuilder();

    /**
     * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    boolean hasJoin();
    /**
     * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.JoinMsg getJoin();
    /**
     * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.JoinMsgOrBuilder getJoinOrBuilder();

    /**
     * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    boolean hasError();
    /**
     * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.ErrorMsg getError();
    /**
     * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.ErrorMsgOrBuilder getErrorOrBuilder();

    /**
     * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    boolean hasRoleChange();
    /**
     * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg getRoleChange();
    /**
     * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    lab4.snakes.SnakesProto.GameMessage.RoleChangeMsgOrBuilder getRoleChangeOrBuilder();

    public lab4.snakes.SnakesProto.GameMessage.TypeCase getTypeCase();
  }
  /**
   * Protobuf type {@code lab4.snakes.GameMessage}
   *
   * <pre>
   * Общий формат любого сообщения
   * </pre>
   */
  public  static final class GameMessage extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:lab4.snakes.GameMessage)
      GameMessageOrBuilder {
    // Use GameMessage.newBuilder() to construct.
    private GameMessage(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private GameMessage() {
      msgSeq_ = 0L;
      senderId_ = 0;
      receiverId_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GameMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              msgSeq_ = input.readInt64();
              break;
            }
            case 18: {
              lab4.snakes.SnakesProto.GameMessage.PingMsg.Builder subBuilder = null;
              if (typeCase_ == 2) {
                subBuilder = ((lab4.snakes.SnakesProto.GameMessage.PingMsg) type_).toBuilder();
              }
              type_ =
                  input.readMessage(lab4.snakes.SnakesProto.GameMessage.PingMsg.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((lab4.snakes.SnakesProto.GameMessage.PingMsg) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 2;
              break;
            }
            case 26: {
              lab4.snakes.SnakesProto.GameMessage.SteerMsg.Builder subBuilder = null;
              if (typeCase_ == 3) {
                subBuilder = ((lab4.snakes.SnakesProto.GameMessage.SteerMsg) type_).toBuilder();
              }
              type_ =
                  input.readMessage(lab4.snakes.SnakesProto.GameMessage.SteerMsg.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((lab4.snakes.SnakesProto.GameMessage.SteerMsg) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 3;
              break;
            }
            case 34: {
              lab4.snakes.SnakesProto.GameMessage.AckMsg.Builder subBuilder = null;
              if (typeCase_ == 4) {
                subBuilder = ((lab4.snakes.SnakesProto.GameMessage.AckMsg) type_).toBuilder();
              }
              type_ =
                  input.readMessage(lab4.snakes.SnakesProto.GameMessage.AckMsg.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((lab4.snakes.SnakesProto.GameMessage.AckMsg) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 4;
              break;
            }
            case 42: {
              lab4.snakes.SnakesProto.GameMessage.StateMsg.Builder subBuilder = null;
              if (typeCase_ == 5) {
                subBuilder = ((lab4.snakes.SnakesProto.GameMessage.StateMsg) type_).toBuilder();
              }
              type_ =
                  input.readMessage(lab4.snakes.SnakesProto.GameMessage.StateMsg.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((lab4.snakes.SnakesProto.GameMessage.StateMsg) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 5;
              break;
            }
            case 50: {
              lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.Builder subBuilder = null;
              if (typeCase_ == 6) {
                subBuilder = ((lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg) type_).toBuilder();
              }
              type_ =
                  input.readMessage(lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 6;
              break;
            }
            case 58: {
              lab4.snakes.SnakesProto.GameMessage.JoinMsg.Builder subBuilder = null;
              if (typeCase_ == 7) {
                subBuilder = ((lab4.snakes.SnakesProto.GameMessage.JoinMsg) type_).toBuilder();
              }
              type_ =
                  input.readMessage(lab4.snakes.SnakesProto.GameMessage.JoinMsg.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((lab4.snakes.SnakesProto.GameMessage.JoinMsg) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 7;
              break;
            }
            case 66: {
              lab4.snakes.SnakesProto.GameMessage.ErrorMsg.Builder subBuilder = null;
              if (typeCase_ == 8) {
                subBuilder = ((lab4.snakes.SnakesProto.GameMessage.ErrorMsg) type_).toBuilder();
              }
              type_ =
                  input.readMessage(lab4.snakes.SnakesProto.GameMessage.ErrorMsg.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((lab4.snakes.SnakesProto.GameMessage.ErrorMsg) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 8;
              break;
            }
            case 74: {
              lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.Builder subBuilder = null;
              if (typeCase_ == 9) {
                subBuilder = ((lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg) type_).toBuilder();
              }
              type_ =
                  input.readMessage(lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 9;
              break;
            }
            case 80: {
              bitField0_ |= 0x00000002;
              senderId_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000004;
              receiverId_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              lab4.snakes.SnakesProto.GameMessage.class, lab4.snakes.SnakesProto.GameMessage.Builder.class);
    }

    public interface PingMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lab4.snakes.GameMessage.PingMsg)
        com.google.protobuf.MessageOrBuilder {
    }
    /**
     * Protobuf type {@code lab4.snakes.GameMessage.PingMsg}
     *
     * <pre>
     * Ничего не меняем, просто говорим что мы живы с интервалом ping_delay_ms
     * </pre>
     */
    public  static final class PingMsg extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:lab4.snakes.GameMessage.PingMsg)
        PingMsgOrBuilder {
      // Use PingMsg.newBuilder() to construct.
      private PingMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private PingMsg() {
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private PingMsg(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_PingMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_PingMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GameMessage.PingMsg.class, lab4.snakes.SnakesProto.GameMessage.PingMsg.Builder.class);
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static lab4.snakes.SnakesProto.GameMessage.PingMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.PingMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.PingMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.PingMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.PingMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.PingMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.PingMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.PingMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.PingMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.PingMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lab4.snakes.SnakesProto.GameMessage.PingMsg prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code lab4.snakes.GameMessage.PingMsg}
       *
       * <pre>
       * Ничего не меняем, просто говорим что мы живы с интервалом ping_delay_ms
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:lab4.snakes.GameMessage.PingMsg)
          lab4.snakes.SnakesProto.GameMessage.PingMsgOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_PingMsg_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_PingMsg_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  lab4.snakes.SnakesProto.GameMessage.PingMsg.class, lab4.snakes.SnakesProto.GameMessage.PingMsg.Builder.class);
        }

        // Construct using lab4.snakes.SnakesProto.GameMessage.PingMsg.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_PingMsg_descriptor;
        }

        public lab4.snakes.SnakesProto.GameMessage.PingMsg getDefaultInstanceForType() {
          return lab4.snakes.SnakesProto.GameMessage.PingMsg.getDefaultInstance();
        }

        public lab4.snakes.SnakesProto.GameMessage.PingMsg build() {
          lab4.snakes.SnakesProto.GameMessage.PingMsg result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public lab4.snakes.SnakesProto.GameMessage.PingMsg buildPartial() {
          lab4.snakes.SnakesProto.GameMessage.PingMsg result = new lab4.snakes.SnakesProto.GameMessage.PingMsg(this);
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof lab4.snakes.SnakesProto.GameMessage.PingMsg) {
            return mergeFrom((lab4.snakes.SnakesProto.GameMessage.PingMsg)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(lab4.snakes.SnakesProto.GameMessage.PingMsg other) {
          if (other == lab4.snakes.SnakesProto.GameMessage.PingMsg.getDefaultInstance()) return this;
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          lab4.snakes.SnakesProto.GameMessage.PingMsg parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (lab4.snakes.SnakesProto.GameMessage.PingMsg) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        // @@protoc_insertion_point(builder_scope:lab4.snakes.GameMessage.PingMsg)
      }

      // @@protoc_insertion_point(class_scope:lab4.snakes.GameMessage.PingMsg)
      private static final lab4.snakes.SnakesProto.GameMessage.PingMsg DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GameMessage.PingMsg();
      }

      public static lab4.snakes.SnakesProto.GameMessage.PingMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<PingMsg>
          PARSER = new com.google.protobuf.AbstractParser<PingMsg>() {
        public PingMsg parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new PingMsg(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<PingMsg> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<PingMsg> getParserForType() {
        return PARSER;
      }

      public lab4.snakes.SnakesProto.GameMessage.PingMsg getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface SteerMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lab4.snakes.GameMessage.SteerMsg)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required .lab4.snakes.Direction direction = 1;</code>
       *
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       */
      boolean hasDirection();
      /**
       * <code>required .lab4.snakes.Direction direction = 1;</code>
       *
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       */
      lab4.snakes.SnakesProto.Direction getDirection();
    }
    /**
     * Protobuf type {@code lab4.snakes.GameMessage.SteerMsg}
     *
     * <pre>
     * Не-центральный игрок просит повернуть голову змеи
     * </pre>
     */
    public  static final class SteerMsg extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:lab4.snakes.GameMessage.SteerMsg)
        SteerMsgOrBuilder {
      // Use SteerMsg.newBuilder() to construct.
      private SteerMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private SteerMsg() {
        direction_ = 1;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private SteerMsg(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                lab4.snakes.SnakesProto.Direction value = lab4.snakes.SnakesProto.Direction.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  direction_ = rawValue;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_SteerMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_SteerMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GameMessage.SteerMsg.class, lab4.snakes.SnakesProto.GameMessage.SteerMsg.Builder.class);
      }

      private int bitField0_;
      public static final int DIRECTION_FIELD_NUMBER = 1;
      private int direction_;
      /**
       * <code>required .lab4.snakes.Direction direction = 1;</code>
       *
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       */
      public boolean hasDirection() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .lab4.snakes.Direction direction = 1;</code>
       *
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       */
      public lab4.snakes.SnakesProto.Direction getDirection() {
        lab4.snakes.SnakesProto.Direction result = lab4.snakes.SnakesProto.Direction.valueOf(direction_);
        return result == null ? lab4.snakes.SnakesProto.Direction.UP : result;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasDirection()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, direction_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, direction_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static lab4.snakes.SnakesProto.GameMessage.SteerMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.SteerMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.SteerMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.SteerMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.SteerMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.SteerMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.SteerMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.SteerMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.SteerMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.SteerMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lab4.snakes.SnakesProto.GameMessage.SteerMsg prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code lab4.snakes.GameMessage.SteerMsg}
       *
       * <pre>
       * Не-центральный игрок просит повернуть голову змеи
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:lab4.snakes.GameMessage.SteerMsg)
          lab4.snakes.SnakesProto.GameMessage.SteerMsgOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_SteerMsg_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_SteerMsg_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  lab4.snakes.SnakesProto.GameMessage.SteerMsg.class, lab4.snakes.SnakesProto.GameMessage.SteerMsg.Builder.class);
        }

        // Construct using lab4.snakes.SnakesProto.GameMessage.SteerMsg.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          direction_ = 1;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_SteerMsg_descriptor;
        }

        public lab4.snakes.SnakesProto.GameMessage.SteerMsg getDefaultInstanceForType() {
          return lab4.snakes.SnakesProto.GameMessage.SteerMsg.getDefaultInstance();
        }

        public lab4.snakes.SnakesProto.GameMessage.SteerMsg build() {
          lab4.snakes.SnakesProto.GameMessage.SteerMsg result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public lab4.snakes.SnakesProto.GameMessage.SteerMsg buildPartial() {
          lab4.snakes.SnakesProto.GameMessage.SteerMsg result = new lab4.snakes.SnakesProto.GameMessage.SteerMsg(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.direction_ = direction_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof lab4.snakes.SnakesProto.GameMessage.SteerMsg) {
            return mergeFrom((lab4.snakes.SnakesProto.GameMessage.SteerMsg)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(lab4.snakes.SnakesProto.GameMessage.SteerMsg other) {
          if (other == lab4.snakes.SnakesProto.GameMessage.SteerMsg.getDefaultInstance()) return this;
          if (other.hasDirection()) {
            setDirection(other.getDirection());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasDirection()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          lab4.snakes.SnakesProto.GameMessage.SteerMsg parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (lab4.snakes.SnakesProto.GameMessage.SteerMsg) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int direction_ = 1;
        /**
         * <code>required .lab4.snakes.Direction direction = 1;</code>
         *
         * <pre>
         * Куда повернуть на следующем шаге
         * </pre>
         */
        public boolean hasDirection() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required .lab4.snakes.Direction direction = 1;</code>
         *
         * <pre>
         * Куда повернуть на следующем шаге
         * </pre>
         */
        public lab4.snakes.SnakesProto.Direction getDirection() {
          lab4.snakes.SnakesProto.Direction result = lab4.snakes.SnakesProto.Direction.valueOf(direction_);
          return result == null ? lab4.snakes.SnakesProto.Direction.UP : result;
        }
        /**
         * <code>required .lab4.snakes.Direction direction = 1;</code>
         *
         * <pre>
         * Куда повернуть на следующем шаге
         * </pre>
         */
        public Builder setDirection(lab4.snakes.SnakesProto.Direction value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          direction_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>required .lab4.snakes.Direction direction = 1;</code>
         *
         * <pre>
         * Куда повернуть на следующем шаге
         * </pre>
         */
        public Builder clearDirection() {
          bitField0_ = (bitField0_ & ~0x00000001);
          direction_ = 1;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:lab4.snakes.GameMessage.SteerMsg)
      }

      // @@protoc_insertion_point(class_scope:lab4.snakes.GameMessage.SteerMsg)
      private static final lab4.snakes.SnakesProto.GameMessage.SteerMsg DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GameMessage.SteerMsg();
      }

      public static lab4.snakes.SnakesProto.GameMessage.SteerMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<SteerMsg>
          PARSER = new com.google.protobuf.AbstractParser<SteerMsg>() {
        public SteerMsg parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new SteerMsg(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<SteerMsg> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<SteerMsg> getParserForType() {
        return PARSER;
      }

      public lab4.snakes.SnakesProto.GameMessage.SteerMsg getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface AckMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lab4.snakes.GameMessage.AckMsg)
        com.google.protobuf.MessageOrBuilder {
    }
    /**
     * Protobuf type {@code lab4.snakes.GameMessage.AckMsg}
     *
     * <pre>
     * Подтверждение сообщения с таким же seq
     * </pre>
     */
    public  static final class AckMsg extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:lab4.snakes.GameMessage.AckMsg)
        AckMsgOrBuilder {
      // Use AckMsg.newBuilder() to construct.
      private AckMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private AckMsg() {
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private AckMsg(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_AckMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_AckMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GameMessage.AckMsg.class, lab4.snakes.SnakesProto.GameMessage.AckMsg.Builder.class);
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static lab4.snakes.SnakesProto.GameMessage.AckMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AckMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AckMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AckMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AckMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AckMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AckMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AckMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AckMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AckMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lab4.snakes.SnakesProto.GameMessage.AckMsg prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code lab4.snakes.GameMessage.AckMsg}
       *
       * <pre>
       * Подтверждение сообщения с таким же seq
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:lab4.snakes.GameMessage.AckMsg)
          lab4.snakes.SnakesProto.GameMessage.AckMsgOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_AckMsg_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_AckMsg_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  lab4.snakes.SnakesProto.GameMessage.AckMsg.class, lab4.snakes.SnakesProto.GameMessage.AckMsg.Builder.class);
        }

        // Construct using lab4.snakes.SnakesProto.GameMessage.AckMsg.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_AckMsg_descriptor;
        }

        public lab4.snakes.SnakesProto.GameMessage.AckMsg getDefaultInstanceForType() {
          return lab4.snakes.SnakesProto.GameMessage.AckMsg.getDefaultInstance();
        }

        public lab4.snakes.SnakesProto.GameMessage.AckMsg build() {
          lab4.snakes.SnakesProto.GameMessage.AckMsg result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public lab4.snakes.SnakesProto.GameMessage.AckMsg buildPartial() {
          lab4.snakes.SnakesProto.GameMessage.AckMsg result = new lab4.snakes.SnakesProto.GameMessage.AckMsg(this);
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof lab4.snakes.SnakesProto.GameMessage.AckMsg) {
            return mergeFrom((lab4.snakes.SnakesProto.GameMessage.AckMsg)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(lab4.snakes.SnakesProto.GameMessage.AckMsg other) {
          if (other == lab4.snakes.SnakesProto.GameMessage.AckMsg.getDefaultInstance()) return this;
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          lab4.snakes.SnakesProto.GameMessage.AckMsg parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (lab4.snakes.SnakesProto.GameMessage.AckMsg) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        // @@protoc_insertion_point(builder_scope:lab4.snakes.GameMessage.AckMsg)
      }

      // @@protoc_insertion_point(class_scope:lab4.snakes.GameMessage.AckMsg)
      private static final lab4.snakes.SnakesProto.GameMessage.AckMsg DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GameMessage.AckMsg();
      }

      public static lab4.snakes.SnakesProto.GameMessage.AckMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<AckMsg>
          PARSER = new com.google.protobuf.AbstractParser<AckMsg>() {
        public AckMsg parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new AckMsg(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<AckMsg> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<AckMsg> getParserForType() {
        return PARSER;
      }

      public lab4.snakes.SnakesProto.GameMessage.AckMsg getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface StateMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lab4.snakes.GameMessage.StateMsg)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required .lab4.snakes.GameState state = 1;</code>
       *
       * <pre>
       * Состояние игрового поля
       * </pre>
       */
      boolean hasState();
      /**
       * <code>required .lab4.snakes.GameState state = 1;</code>
       *
       * <pre>
       * Состояние игрового поля
       * </pre>
       */
      lab4.snakes.SnakesProto.GameState getState();
      /**
       * <code>required .lab4.snakes.GameState state = 1;</code>
       *
       * <pre>
       * Состояние игрового поля
       * </pre>
       */
      lab4.snakes.SnakesProto.GameStateOrBuilder getStateOrBuilder();
    }
    /**
     * Protobuf type {@code lab4.snakes.GameMessage.StateMsg}
     *
     * <pre>
     * Центральный узел сообщает отсальным игрокам состояние игры
     * </pre>
     */
    public  static final class StateMsg extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:lab4.snakes.GameMessage.StateMsg)
        StateMsgOrBuilder {
      // Use StateMsg.newBuilder() to construct.
      private StateMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private StateMsg() {
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private StateMsg(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                lab4.snakes.SnakesProto.GameState.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = state_.toBuilder();
                }
                state_ = input.readMessage(lab4.snakes.SnakesProto.GameState.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(state_);
                  state_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_StateMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_StateMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GameMessage.StateMsg.class, lab4.snakes.SnakesProto.GameMessage.StateMsg.Builder.class);
      }

      private int bitField0_;
      public static final int STATE_FIELD_NUMBER = 1;
      private lab4.snakes.SnakesProto.GameState state_;
      /**
       * <code>required .lab4.snakes.GameState state = 1;</code>
       *
       * <pre>
       * Состояние игрового поля
       * </pre>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .lab4.snakes.GameState state = 1;</code>
       *
       * <pre>
       * Состояние игрового поля
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameState getState() {
        return state_ == null ? lab4.snakes.SnakesProto.GameState.getDefaultInstance() : state_;
      }
      /**
       * <code>required .lab4.snakes.GameState state = 1;</code>
       *
       * <pre>
       * Состояние игрового поля
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameStateOrBuilder getStateOrBuilder() {
        return state_ == null ? lab4.snakes.SnakesProto.GameState.getDefaultInstance() : state_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasState()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!getState().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, getState());
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getState());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static lab4.snakes.SnakesProto.GameMessage.StateMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.StateMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.StateMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.StateMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.StateMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.StateMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.StateMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.StateMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.StateMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.StateMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lab4.snakes.SnakesProto.GameMessage.StateMsg prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code lab4.snakes.GameMessage.StateMsg}
       *
       * <pre>
       * Центральный узел сообщает отсальным игрокам состояние игры
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:lab4.snakes.GameMessage.StateMsg)
          lab4.snakes.SnakesProto.GameMessage.StateMsgOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_StateMsg_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_StateMsg_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  lab4.snakes.SnakesProto.GameMessage.StateMsg.class, lab4.snakes.SnakesProto.GameMessage.StateMsg.Builder.class);
        }

        // Construct using lab4.snakes.SnakesProto.GameMessage.StateMsg.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getStateFieldBuilder();
          }
        }
        public Builder clear() {
          super.clear();
          if (stateBuilder_ == null) {
            state_ = null;
          } else {
            stateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_StateMsg_descriptor;
        }

        public lab4.snakes.SnakesProto.GameMessage.StateMsg getDefaultInstanceForType() {
          return lab4.snakes.SnakesProto.GameMessage.StateMsg.getDefaultInstance();
        }

        public lab4.snakes.SnakesProto.GameMessage.StateMsg build() {
          lab4.snakes.SnakesProto.GameMessage.StateMsg result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public lab4.snakes.SnakesProto.GameMessage.StateMsg buildPartial() {
          lab4.snakes.SnakesProto.GameMessage.StateMsg result = new lab4.snakes.SnakesProto.GameMessage.StateMsg(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (stateBuilder_ == null) {
            result.state_ = state_;
          } else {
            result.state_ = stateBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof lab4.snakes.SnakesProto.GameMessage.StateMsg) {
            return mergeFrom((lab4.snakes.SnakesProto.GameMessage.StateMsg)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(lab4.snakes.SnakesProto.GameMessage.StateMsg other) {
          if (other == lab4.snakes.SnakesProto.GameMessage.StateMsg.getDefaultInstance()) return this;
          if (other.hasState()) {
            mergeState(other.getState());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasState()) {
            return false;
          }
          if (!getState().isInitialized()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          lab4.snakes.SnakesProto.GameMessage.StateMsg parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (lab4.snakes.SnakesProto.GameMessage.StateMsg) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private lab4.snakes.SnakesProto.GameState state_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            lab4.snakes.SnakesProto.GameState, lab4.snakes.SnakesProto.GameState.Builder, lab4.snakes.SnakesProto.GameStateOrBuilder> stateBuilder_;
        /**
         * <code>required .lab4.snakes.GameState state = 1;</code>
         *
         * <pre>
         * Состояние игрового поля
         * </pre>
         */
        public boolean hasState() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required .lab4.snakes.GameState state = 1;</code>
         *
         * <pre>
         * Состояние игрового поля
         * </pre>
         */
        public lab4.snakes.SnakesProto.GameState getState() {
          if (stateBuilder_ == null) {
            return state_ == null ? lab4.snakes.SnakesProto.GameState.getDefaultInstance() : state_;
          } else {
            return stateBuilder_.getMessage();
          }
        }
        /**
         * <code>required .lab4.snakes.GameState state = 1;</code>
         *
         * <pre>
         * Состояние игрового поля
         * </pre>
         */
        public Builder setState(lab4.snakes.SnakesProto.GameState value) {
          if (stateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            state_ = value;
            onChanged();
          } else {
            stateBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>required .lab4.snakes.GameState state = 1;</code>
         *
         * <pre>
         * Состояние игрового поля
         * </pre>
         */
        public Builder setState(
            lab4.snakes.SnakesProto.GameState.Builder builderForValue) {
          if (stateBuilder_ == null) {
            state_ = builderForValue.build();
            onChanged();
          } else {
            stateBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>required .lab4.snakes.GameState state = 1;</code>
         *
         * <pre>
         * Состояние игрового поля
         * </pre>
         */
        public Builder mergeState(lab4.snakes.SnakesProto.GameState value) {
          if (stateBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                state_ != null &&
                state_ != lab4.snakes.SnakesProto.GameState.getDefaultInstance()) {
              state_ =
                lab4.snakes.SnakesProto.GameState.newBuilder(state_).mergeFrom(value).buildPartial();
            } else {
              state_ = value;
            }
            onChanged();
          } else {
            stateBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>required .lab4.snakes.GameState state = 1;</code>
         *
         * <pre>
         * Состояние игрового поля
         * </pre>
         */
        public Builder clearState() {
          if (stateBuilder_ == null) {
            state_ = null;
            onChanged();
          } else {
            stateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>required .lab4.snakes.GameState state = 1;</code>
         *
         * <pre>
         * Состояние игрового поля
         * </pre>
         */
        public lab4.snakes.SnakesProto.GameState.Builder getStateBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getStateFieldBuilder().getBuilder();
        }
        /**
         * <code>required .lab4.snakes.GameState state = 1;</code>
         *
         * <pre>
         * Состояние игрового поля
         * </pre>
         */
        public lab4.snakes.SnakesProto.GameStateOrBuilder getStateOrBuilder() {
          if (stateBuilder_ != null) {
            return stateBuilder_.getMessageOrBuilder();
          } else {
            return state_ == null ?
                lab4.snakes.SnakesProto.GameState.getDefaultInstance() : state_;
          }
        }
        /**
         * <code>required .lab4.snakes.GameState state = 1;</code>
         *
         * <pre>
         * Состояние игрового поля
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            lab4.snakes.SnakesProto.GameState, lab4.snakes.SnakesProto.GameState.Builder, lab4.snakes.SnakesProto.GameStateOrBuilder> 
            getStateFieldBuilder() {
          if (stateBuilder_ == null) {
            stateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                lab4.snakes.SnakesProto.GameState, lab4.snakes.SnakesProto.GameState.Builder, lab4.snakes.SnakesProto.GameStateOrBuilder>(
                    getState(),
                    getParentForChildren(),
                    isClean());
            state_ = null;
          }
          return stateBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:lab4.snakes.GameMessage.StateMsg)
      }

      // @@protoc_insertion_point(class_scope:lab4.snakes.GameMessage.StateMsg)
      private static final lab4.snakes.SnakesProto.GameMessage.StateMsg DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GameMessage.StateMsg();
      }

      public static lab4.snakes.SnakesProto.GameMessage.StateMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<StateMsg>
          PARSER = new com.google.protobuf.AbstractParser<StateMsg>() {
        public StateMsg parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new StateMsg(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<StateMsg> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<StateMsg> getParserForType() {
        return PARSER;
      }

      public lab4.snakes.SnakesProto.GameMessage.StateMsg getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface AnnouncementMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lab4.snakes.GameMessage.AnnouncementMsg)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required .lab4.snakes.GamePlayers players = 1;</code>
       *
       * <pre>
       * Текущие игроки
       * </pre>
       */
      boolean hasPlayers();
      /**
       * <code>required .lab4.snakes.GamePlayers players = 1;</code>
       *
       * <pre>
       * Текущие игроки
       * </pre>
       */
      lab4.snakes.SnakesProto.GamePlayers getPlayers();
      /**
       * <code>required .lab4.snakes.GamePlayers players = 1;</code>
       *
       * <pre>
       * Текущие игроки
       * </pre>
       */
      lab4.snakes.SnakesProto.GamePlayersOrBuilder getPlayersOrBuilder();

      /**
       * <code>required .lab4.snakes.GameConfig config = 2;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      boolean hasConfig();
      /**
       * <code>required .lab4.snakes.GameConfig config = 2;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      lab4.snakes.SnakesProto.GameConfig getConfig();
      /**
       * <code>required .lab4.snakes.GameConfig config = 2;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      lab4.snakes.SnakesProto.GameConfigOrBuilder getConfigOrBuilder();

      /**
       * <code>optional bool can_join = 3 [default = true];</code>
       *
       * <pre>
       * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
       * </pre>
       */
      boolean hasCanJoin();
      /**
       * <code>optional bool can_join = 3 [default = true];</code>
       *
       * <pre>
       * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
       * </pre>
       */
      boolean getCanJoin();
    }
    /**
     * Protobuf type {@code lab4.snakes.GameMessage.AnnouncementMsg}
     *
     * <pre>
     * Уведомление об идущей игре, регулярно отправляется multicast-ом
     * </pre>
     */
    public  static final class AnnouncementMsg extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:lab4.snakes.GameMessage.AnnouncementMsg)
        AnnouncementMsgOrBuilder {
      // Use AnnouncementMsg.newBuilder() to construct.
      private AnnouncementMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private AnnouncementMsg() {
        canJoin_ = true;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private AnnouncementMsg(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                lab4.snakes.SnakesProto.GamePlayers.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = players_.toBuilder();
                }
                players_ = input.readMessage(lab4.snakes.SnakesProto.GamePlayers.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(players_);
                  players_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                lab4.snakes.SnakesProto.GameConfig.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = config_.toBuilder();
                }
                config_ = input.readMessage(lab4.snakes.SnakesProto.GameConfig.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(config_);
                  config_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                canJoin_ = input.readBool();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_AnnouncementMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_AnnouncementMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.class, lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.Builder.class);
      }

      private int bitField0_;
      public static final int PLAYERS_FIELD_NUMBER = 1;
      private lab4.snakes.SnakesProto.GamePlayers players_;
      /**
       * <code>required .lab4.snakes.GamePlayers players = 1;</code>
       *
       * <pre>
       * Текущие игроки
       * </pre>
       */
      public boolean hasPlayers() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .lab4.snakes.GamePlayers players = 1;</code>
       *
       * <pre>
       * Текущие игроки
       * </pre>
       */
      public lab4.snakes.SnakesProto.GamePlayers getPlayers() {
        return players_ == null ? lab4.snakes.SnakesProto.GamePlayers.getDefaultInstance() : players_;
      }
      /**
       * <code>required .lab4.snakes.GamePlayers players = 1;</code>
       *
       * <pre>
       * Текущие игроки
       * </pre>
       */
      public lab4.snakes.SnakesProto.GamePlayersOrBuilder getPlayersOrBuilder() {
        return players_ == null ? lab4.snakes.SnakesProto.GamePlayers.getDefaultInstance() : players_;
      }

      public static final int CONFIG_FIELD_NUMBER = 2;
      private lab4.snakes.SnakesProto.GameConfig config_;
      /**
       * <code>required .lab4.snakes.GameConfig config = 2;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      public boolean hasConfig() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .lab4.snakes.GameConfig config = 2;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameConfig getConfig() {
        return config_ == null ? lab4.snakes.SnakesProto.GameConfig.getDefaultInstance() : config_;
      }
      /**
       * <code>required .lab4.snakes.GameConfig config = 2;</code>
       *
       * <pre>
       * Параметры игры
       * </pre>
       */
      public lab4.snakes.SnakesProto.GameConfigOrBuilder getConfigOrBuilder() {
        return config_ == null ? lab4.snakes.SnakesProto.GameConfig.getDefaultInstance() : config_;
      }

      public static final int CAN_JOIN_FIELD_NUMBER = 3;
      private boolean canJoin_;
      /**
       * <code>optional bool can_join = 3 [default = true];</code>
       *
       * <pre>
       * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
       * </pre>
       */
      public boolean hasCanJoin() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool can_join = 3 [default = true];</code>
       *
       * <pre>
       * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
       * </pre>
       */
      public boolean getCanJoin() {
        return canJoin_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasPlayers()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasConfig()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!getPlayers().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, getPlayers());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, getConfig());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeBool(3, canJoin_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getPlayers());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getConfig());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(3, canJoin_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code lab4.snakes.GameMessage.AnnouncementMsg}
       *
       * <pre>
       * Уведомление об идущей игре, регулярно отправляется multicast-ом
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:lab4.snakes.GameMessage.AnnouncementMsg)
          lab4.snakes.SnakesProto.GameMessage.AnnouncementMsgOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_AnnouncementMsg_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_AnnouncementMsg_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.class, lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.Builder.class);
        }

        // Construct using lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPlayersFieldBuilder();
            getConfigFieldBuilder();
          }
        }
        public Builder clear() {
          super.clear();
          if (playersBuilder_ == null) {
            players_ = null;
          } else {
            playersBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          if (configBuilder_ == null) {
            config_ = null;
          } else {
            configBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          canJoin_ = true;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_AnnouncementMsg_descriptor;
        }

        public lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg getDefaultInstanceForType() {
          return lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.getDefaultInstance();
        }

        public lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg build() {
          lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg buildPartial() {
          lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg result = new lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (playersBuilder_ == null) {
            result.players_ = players_;
          } else {
            result.players_ = playersBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (configBuilder_ == null) {
            result.config_ = config_;
          } else {
            result.config_ = configBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.canJoin_ = canJoin_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg) {
            return mergeFrom((lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg other) {
          if (other == lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.getDefaultInstance()) return this;
          if (other.hasPlayers()) {
            mergePlayers(other.getPlayers());
          }
          if (other.hasConfig()) {
            mergeConfig(other.getConfig());
          }
          if (other.hasCanJoin()) {
            setCanJoin(other.getCanJoin());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasPlayers()) {
            return false;
          }
          if (!hasConfig()) {
            return false;
          }
          if (!getPlayers().isInitialized()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private lab4.snakes.SnakesProto.GamePlayers players_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            lab4.snakes.SnakesProto.GamePlayers, lab4.snakes.SnakesProto.GamePlayers.Builder, lab4.snakes.SnakesProto.GamePlayersOrBuilder> playersBuilder_;
        /**
         * <code>required .lab4.snakes.GamePlayers players = 1;</code>
         *
         * <pre>
         * Текущие игроки
         * </pre>
         */
        public boolean hasPlayers() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required .lab4.snakes.GamePlayers players = 1;</code>
         *
         * <pre>
         * Текущие игроки
         * </pre>
         */
        public lab4.snakes.SnakesProto.GamePlayers getPlayers() {
          if (playersBuilder_ == null) {
            return players_ == null ? lab4.snakes.SnakesProto.GamePlayers.getDefaultInstance() : players_;
          } else {
            return playersBuilder_.getMessage();
          }
        }
        /**
         * <code>required .lab4.snakes.GamePlayers players = 1;</code>
         *
         * <pre>
         * Текущие игроки
         * </pre>
         */
        public Builder setPlayers(lab4.snakes.SnakesProto.GamePlayers value) {
          if (playersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            players_ = value;
            onChanged();
          } else {
            playersBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>required .lab4.snakes.GamePlayers players = 1;</code>
         *
         * <pre>
         * Текущие игроки
         * </pre>
         */
        public Builder setPlayers(
            lab4.snakes.SnakesProto.GamePlayers.Builder builderForValue) {
          if (playersBuilder_ == null) {
            players_ = builderForValue.build();
            onChanged();
          } else {
            playersBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>required .lab4.snakes.GamePlayers players = 1;</code>
         *
         * <pre>
         * Текущие игроки
         * </pre>
         */
        public Builder mergePlayers(lab4.snakes.SnakesProto.GamePlayers value) {
          if (playersBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                players_ != null &&
                players_ != lab4.snakes.SnakesProto.GamePlayers.getDefaultInstance()) {
              players_ =
                lab4.snakes.SnakesProto.GamePlayers.newBuilder(players_).mergeFrom(value).buildPartial();
            } else {
              players_ = value;
            }
            onChanged();
          } else {
            playersBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>required .lab4.snakes.GamePlayers players = 1;</code>
         *
         * <pre>
         * Текущие игроки
         * </pre>
         */
        public Builder clearPlayers() {
          if (playersBuilder_ == null) {
            players_ = null;
            onChanged();
          } else {
            playersBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>required .lab4.snakes.GamePlayers players = 1;</code>
         *
         * <pre>
         * Текущие игроки
         * </pre>
         */
        public lab4.snakes.SnakesProto.GamePlayers.Builder getPlayersBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getPlayersFieldBuilder().getBuilder();
        }
        /**
         * <code>required .lab4.snakes.GamePlayers players = 1;</code>
         *
         * <pre>
         * Текущие игроки
         * </pre>
         */
        public lab4.snakes.SnakesProto.GamePlayersOrBuilder getPlayersOrBuilder() {
          if (playersBuilder_ != null) {
            return playersBuilder_.getMessageOrBuilder();
          } else {
            return players_ == null ?
                lab4.snakes.SnakesProto.GamePlayers.getDefaultInstance() : players_;
          }
        }
        /**
         * <code>required .lab4.snakes.GamePlayers players = 1;</code>
         *
         * <pre>
         * Текущие игроки
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            lab4.snakes.SnakesProto.GamePlayers, lab4.snakes.SnakesProto.GamePlayers.Builder, lab4.snakes.SnakesProto.GamePlayersOrBuilder> 
            getPlayersFieldBuilder() {
          if (playersBuilder_ == null) {
            playersBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                lab4.snakes.SnakesProto.GamePlayers, lab4.snakes.SnakesProto.GamePlayers.Builder, lab4.snakes.SnakesProto.GamePlayersOrBuilder>(
                    getPlayers(),
                    getParentForChildren(),
                    isClean());
            players_ = null;
          }
          return playersBuilder_;
        }

        private lab4.snakes.SnakesProto.GameConfig config_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            lab4.snakes.SnakesProto.GameConfig, lab4.snakes.SnakesProto.GameConfig.Builder, lab4.snakes.SnakesProto.GameConfigOrBuilder> configBuilder_;
        /**
         * <code>required .lab4.snakes.GameConfig config = 2;</code>
         *
         * <pre>
         * Параметры игры
         * </pre>
         */
        public boolean hasConfig() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required .lab4.snakes.GameConfig config = 2;</code>
         *
         * <pre>
         * Параметры игры
         * </pre>
         */
        public lab4.snakes.SnakesProto.GameConfig getConfig() {
          if (configBuilder_ == null) {
            return config_ == null ? lab4.snakes.SnakesProto.GameConfig.getDefaultInstance() : config_;
          } else {
            return configBuilder_.getMessage();
          }
        }
        /**
         * <code>required .lab4.snakes.GameConfig config = 2;</code>
         *
         * <pre>
         * Параметры игры
         * </pre>
         */
        public Builder setConfig(lab4.snakes.SnakesProto.GameConfig value) {
          if (configBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            config_ = value;
            onChanged();
          } else {
            configBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .lab4.snakes.GameConfig config = 2;</code>
         *
         * <pre>
         * Параметры игры
         * </pre>
         */
        public Builder setConfig(
            lab4.snakes.SnakesProto.GameConfig.Builder builderForValue) {
          if (configBuilder_ == null) {
            config_ = builderForValue.build();
            onChanged();
          } else {
            configBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .lab4.snakes.GameConfig config = 2;</code>
         *
         * <pre>
         * Параметры игры
         * </pre>
         */
        public Builder mergeConfig(lab4.snakes.SnakesProto.GameConfig value) {
          if (configBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                config_ != null &&
                config_ != lab4.snakes.SnakesProto.GameConfig.getDefaultInstance()) {
              config_ =
                lab4.snakes.SnakesProto.GameConfig.newBuilder(config_).mergeFrom(value).buildPartial();
            } else {
              config_ = value;
            }
            onChanged();
          } else {
            configBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .lab4.snakes.GameConfig config = 2;</code>
         *
         * <pre>
         * Параметры игры
         * </pre>
         */
        public Builder clearConfig() {
          if (configBuilder_ == null) {
            config_ = null;
            onChanged();
          } else {
            configBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>required .lab4.snakes.GameConfig config = 2;</code>
         *
         * <pre>
         * Параметры игры
         * </pre>
         */
        public lab4.snakes.SnakesProto.GameConfig.Builder getConfigBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getConfigFieldBuilder().getBuilder();
        }
        /**
         * <code>required .lab4.snakes.GameConfig config = 2;</code>
         *
         * <pre>
         * Параметры игры
         * </pre>
         */
        public lab4.snakes.SnakesProto.GameConfigOrBuilder getConfigOrBuilder() {
          if (configBuilder_ != null) {
            return configBuilder_.getMessageOrBuilder();
          } else {
            return config_ == null ?
                lab4.snakes.SnakesProto.GameConfig.getDefaultInstance() : config_;
          }
        }
        /**
         * <code>required .lab4.snakes.GameConfig config = 2;</code>
         *
         * <pre>
         * Параметры игры
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            lab4.snakes.SnakesProto.GameConfig, lab4.snakes.SnakesProto.GameConfig.Builder, lab4.snakes.SnakesProto.GameConfigOrBuilder> 
            getConfigFieldBuilder() {
          if (configBuilder_ == null) {
            configBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                lab4.snakes.SnakesProto.GameConfig, lab4.snakes.SnakesProto.GameConfig.Builder, lab4.snakes.SnakesProto.GameConfigOrBuilder>(
                    getConfig(),
                    getParentForChildren(),
                    isClean());
            config_ = null;
          }
          return configBuilder_;
        }

        private boolean canJoin_ = true;
        /**
         * <code>optional bool can_join = 3 [default = true];</code>
         *
         * <pre>
         * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
         * </pre>
         */
        public boolean hasCanJoin() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional bool can_join = 3 [default = true];</code>
         *
         * <pre>
         * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
         * </pre>
         */
        public boolean getCanJoin() {
          return canJoin_;
        }
        /**
         * <code>optional bool can_join = 3 [default = true];</code>
         *
         * <pre>
         * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
         * </pre>
         */
        public Builder setCanJoin(boolean value) {
          bitField0_ |= 0x00000004;
          canJoin_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional bool can_join = 3 [default = true];</code>
         *
         * <pre>
         * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
         * </pre>
         */
        public Builder clearCanJoin() {
          bitField0_ = (bitField0_ & ~0x00000004);
          canJoin_ = true;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:lab4.snakes.GameMessage.AnnouncementMsg)
      }

      // @@protoc_insertion_point(class_scope:lab4.snakes.GameMessage.AnnouncementMsg)
      private static final lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg();
      }

      public static lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<AnnouncementMsg>
          PARSER = new com.google.protobuf.AbstractParser<AnnouncementMsg>() {
        public AnnouncementMsg parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new AnnouncementMsg(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<AnnouncementMsg> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<AnnouncementMsg> getParserForType() {
        return PARSER;
      }

      public lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface JoinMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lab4.snakes.GameMessage.JoinMsg)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional .lab4.snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       *
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       */
      boolean hasPlayerType();
      /**
       * <code>optional .lab4.snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       *
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       */
      lab4.snakes.SnakesProto.PlayerType getPlayerType();

      /**
       * <code>optional bool only_view = 2 [default = false];</code>
       *
       * <pre>
       * Если хотим только понаблюдать, но не играть
       * </pre>
       */
      boolean hasOnlyView();
      /**
       * <code>optional bool only_view = 2 [default = false];</code>
       *
       * <pre>
       * Если хотим только понаблюдать, но не играть
       * </pre>
       */
      boolean getOnlyView();

      /**
       * <code>required string name = 3;</code>
       *
       * <pre>
       * Имя игрока
       * </pre>
       */
      boolean hasName();
      /**
       * <code>required string name = 3;</code>
       *
       * <pre>
       * Имя игрока
       * </pre>
       */
      java.lang.String getName();
      /**
       * <code>required string name = 3;</code>
       *
       * <pre>
       * Имя игрока
       * </pre>
       */
      com.google.protobuf.ByteString
          getNameBytes();
    }
    /**
     * Protobuf type {@code lab4.snakes.GameMessage.JoinMsg}
     *
     * <pre>
     * Новый игрок хочет присоединиться к идущей игре
     * </pre>
     */
    public  static final class JoinMsg extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:lab4.snakes.GameMessage.JoinMsg)
        JoinMsgOrBuilder {
      // Use JoinMsg.newBuilder() to construct.
      private JoinMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private JoinMsg() {
        playerType_ = 0;
        onlyView_ = false;
        name_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private JoinMsg(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                lab4.snakes.SnakesProto.PlayerType value = lab4.snakes.SnakesProto.PlayerType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  playerType_ = rawValue;
                }
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                onlyView_ = input.readBool();
                break;
              }
              case 26: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000004;
                name_ = bs;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_JoinMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_JoinMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GameMessage.JoinMsg.class, lab4.snakes.SnakesProto.GameMessage.JoinMsg.Builder.class);
      }

      private int bitField0_;
      public static final int PLAYER_TYPE_FIELD_NUMBER = 1;
      private int playerType_;
      /**
       * <code>optional .lab4.snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       *
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       */
      public boolean hasPlayerType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .lab4.snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       *
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       */
      public lab4.snakes.SnakesProto.PlayerType getPlayerType() {
        lab4.snakes.SnakesProto.PlayerType result = lab4.snakes.SnakesProto.PlayerType.valueOf(playerType_);
        return result == null ? lab4.snakes.SnakesProto.PlayerType.HUMAN : result;
      }

      public static final int ONLY_VIEW_FIELD_NUMBER = 2;
      private boolean onlyView_;
      /**
       * <code>optional bool only_view = 2 [default = false];</code>
       *
       * <pre>
       * Если хотим только понаблюдать, но не играть
       * </pre>
       */
      public boolean hasOnlyView() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool only_view = 2 [default = false];</code>
       *
       * <pre>
       * Если хотим только понаблюдать, но не играть
       * </pre>
       */
      public boolean getOnlyView() {
        return onlyView_;
      }

      public static final int NAME_FIELD_NUMBER = 3;
      private volatile java.lang.Object name_;
      /**
       * <code>required string name = 3;</code>
       *
       * <pre>
       * Имя игрока
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string name = 3;</code>
       *
       * <pre>
       * Имя игрока
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string name = 3;</code>
       *
       * <pre>
       * Имя игрока
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasName()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, playerType_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBool(2, onlyView_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          com.google.protobuf.GeneratedMessage.writeString(output, 3, name_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, playerType_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, onlyView_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.GeneratedMessage.computeStringSize(3, name_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static lab4.snakes.SnakesProto.GameMessage.JoinMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.JoinMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.JoinMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.JoinMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.JoinMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.JoinMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.JoinMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.JoinMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.JoinMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.JoinMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lab4.snakes.SnakesProto.GameMessage.JoinMsg prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code lab4.snakes.GameMessage.JoinMsg}
       *
       * <pre>
       * Новый игрок хочет присоединиться к идущей игре
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:lab4.snakes.GameMessage.JoinMsg)
          lab4.snakes.SnakesProto.GameMessage.JoinMsgOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_JoinMsg_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_JoinMsg_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  lab4.snakes.SnakesProto.GameMessage.JoinMsg.class, lab4.snakes.SnakesProto.GameMessage.JoinMsg.Builder.class);
        }

        // Construct using lab4.snakes.SnakesProto.GameMessage.JoinMsg.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          playerType_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          onlyView_ = false;
          bitField0_ = (bitField0_ & ~0x00000002);
          name_ = "";
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_JoinMsg_descriptor;
        }

        public lab4.snakes.SnakesProto.GameMessage.JoinMsg getDefaultInstanceForType() {
          return lab4.snakes.SnakesProto.GameMessage.JoinMsg.getDefaultInstance();
        }

        public lab4.snakes.SnakesProto.GameMessage.JoinMsg build() {
          lab4.snakes.SnakesProto.GameMessage.JoinMsg result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public lab4.snakes.SnakesProto.GameMessage.JoinMsg buildPartial() {
          lab4.snakes.SnakesProto.GameMessage.JoinMsg result = new lab4.snakes.SnakesProto.GameMessage.JoinMsg(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.playerType_ = playerType_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.onlyView_ = onlyView_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.name_ = name_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof lab4.snakes.SnakesProto.GameMessage.JoinMsg) {
            return mergeFrom((lab4.snakes.SnakesProto.GameMessage.JoinMsg)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(lab4.snakes.SnakesProto.GameMessage.JoinMsg other) {
          if (other == lab4.snakes.SnakesProto.GameMessage.JoinMsg.getDefaultInstance()) return this;
          if (other.hasPlayerType()) {
            setPlayerType(other.getPlayerType());
          }
          if (other.hasOnlyView()) {
            setOnlyView(other.getOnlyView());
          }
          if (other.hasName()) {
            bitField0_ |= 0x00000004;
            name_ = other.name_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasName()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          lab4.snakes.SnakesProto.GameMessage.JoinMsg parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (lab4.snakes.SnakesProto.GameMessage.JoinMsg) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int playerType_ = 0;
        /**
         * <code>optional .lab4.snakes.PlayerType player_type = 1 [default = HUMAN];</code>
         *
         * <pre>
         * Тип присоединяющегося игрока
         * </pre>
         */
        public boolean hasPlayerType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .lab4.snakes.PlayerType player_type = 1 [default = HUMAN];</code>
         *
         * <pre>
         * Тип присоединяющегося игрока
         * </pre>
         */
        public lab4.snakes.SnakesProto.PlayerType getPlayerType() {
          lab4.snakes.SnakesProto.PlayerType result = lab4.snakes.SnakesProto.PlayerType.valueOf(playerType_);
          return result == null ? lab4.snakes.SnakesProto.PlayerType.HUMAN : result;
        }
        /**
         * <code>optional .lab4.snakes.PlayerType player_type = 1 [default = HUMAN];</code>
         *
         * <pre>
         * Тип присоединяющегося игрока
         * </pre>
         */
        public Builder setPlayerType(lab4.snakes.SnakesProto.PlayerType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          playerType_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>optional .lab4.snakes.PlayerType player_type = 1 [default = HUMAN];</code>
         *
         * <pre>
         * Тип присоединяющегося игрока
         * </pre>
         */
        public Builder clearPlayerType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          playerType_ = 0;
          onChanged();
          return this;
        }

        private boolean onlyView_ ;
        /**
         * <code>optional bool only_view = 2 [default = false];</code>
         *
         * <pre>
         * Если хотим только понаблюдать, но не играть
         * </pre>
         */
        public boolean hasOnlyView() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional bool only_view = 2 [default = false];</code>
         *
         * <pre>
         * Если хотим только понаблюдать, но не играть
         * </pre>
         */
        public boolean getOnlyView() {
          return onlyView_;
        }
        /**
         * <code>optional bool only_view = 2 [default = false];</code>
         *
         * <pre>
         * Если хотим только понаблюдать, но не играть
         * </pre>
         */
        public Builder setOnlyView(boolean value) {
          bitField0_ |= 0x00000002;
          onlyView_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional bool only_view = 2 [default = false];</code>
         *
         * <pre>
         * Если хотим только понаблюдать, но не играть
         * </pre>
         */
        public Builder clearOnlyView() {
          bitField0_ = (bitField0_ & ~0x00000002);
          onlyView_ = false;
          onChanged();
          return this;
        }

        private java.lang.Object name_ = "";
        /**
         * <code>required string name = 3;</code>
         *
         * <pre>
         * Имя игрока
         * </pre>
         */
        public boolean hasName() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required string name = 3;</code>
         *
         * <pre>
         * Имя игрока
         * </pre>
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              name_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string name = 3;</code>
         *
         * <pre>
         * Имя игрока
         * </pre>
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string name = 3;</code>
         *
         * <pre>
         * Имя игрока
         * </pre>
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required string name = 3;</code>
         *
         * <pre>
         * Имя игрока
         * </pre>
         */
        public Builder clearName() {
          bitField0_ = (bitField0_ & ~0x00000004);
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <code>required string name = 3;</code>
         *
         * <pre>
         * Имя игрока
         * </pre>
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          name_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:lab4.snakes.GameMessage.JoinMsg)
      }

      // @@protoc_insertion_point(class_scope:lab4.snakes.GameMessage.JoinMsg)
      private static final lab4.snakes.SnakesProto.GameMessage.JoinMsg DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GameMessage.JoinMsg();
      }

      public static lab4.snakes.SnakesProto.GameMessage.JoinMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<JoinMsg>
          PARSER = new com.google.protobuf.AbstractParser<JoinMsg>() {
        public JoinMsg parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new JoinMsg(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<JoinMsg> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<JoinMsg> getParserForType() {
        return PARSER;
      }

      public lab4.snakes.SnakesProto.GameMessage.JoinMsg getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ErrorMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lab4.snakes.GameMessage.ErrorMsg)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required string error_message = 1;</code>
       *
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       */
      boolean hasErrorMessage();
      /**
       * <code>required string error_message = 1;</code>
       *
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       */
      java.lang.String getErrorMessage();
      /**
       * <code>required string error_message = 1;</code>
       *
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       */
      com.google.protobuf.ByteString
          getErrorMessageBytes();
    }
    /**
     * Protobuf type {@code lab4.snakes.GameMessage.ErrorMsg}
     *
     * <pre>
     * Ошибка операции (например отказ в присоединении к игре, т.к. нет места на поле)
     * </pre>
     */
    public  static final class ErrorMsg extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:lab4.snakes.GameMessage.ErrorMsg)
        ErrorMsgOrBuilder {
      // Use ErrorMsg.newBuilder() to construct.
      private ErrorMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private ErrorMsg() {
        errorMessage_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ErrorMsg(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000001;
                errorMessage_ = bs;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_ErrorMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_ErrorMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GameMessage.ErrorMsg.class, lab4.snakes.SnakesProto.GameMessage.ErrorMsg.Builder.class);
      }

      private int bitField0_;
      public static final int ERROR_MESSAGE_FIELD_NUMBER = 1;
      private volatile java.lang.Object errorMessage_;
      /**
       * <code>required string error_message = 1;</code>
       *
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       */
      public boolean hasErrorMessage() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string error_message = 1;</code>
       *
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       */
      public java.lang.String getErrorMessage() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            errorMessage_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string error_message = 1;</code>
       *
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       */
      public com.google.protobuf.ByteString
          getErrorMessageBytes() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          errorMessage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasErrorMessage()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          com.google.protobuf.GeneratedMessage.writeString(output, 1, errorMessage_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.GeneratedMessage.computeStringSize(1, errorMessage_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static lab4.snakes.SnakesProto.GameMessage.ErrorMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.ErrorMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.ErrorMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.ErrorMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.ErrorMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.ErrorMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.ErrorMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.ErrorMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.ErrorMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.ErrorMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lab4.snakes.SnakesProto.GameMessage.ErrorMsg prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code lab4.snakes.GameMessage.ErrorMsg}
       *
       * <pre>
       * Ошибка операции (например отказ в присоединении к игре, т.к. нет места на поле)
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:lab4.snakes.GameMessage.ErrorMsg)
          lab4.snakes.SnakesProto.GameMessage.ErrorMsgOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_ErrorMsg_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_ErrorMsg_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  lab4.snakes.SnakesProto.GameMessage.ErrorMsg.class, lab4.snakes.SnakesProto.GameMessage.ErrorMsg.Builder.class);
        }

        // Construct using lab4.snakes.SnakesProto.GameMessage.ErrorMsg.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          errorMessage_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_ErrorMsg_descriptor;
        }

        public lab4.snakes.SnakesProto.GameMessage.ErrorMsg getDefaultInstanceForType() {
          return lab4.snakes.SnakesProto.GameMessage.ErrorMsg.getDefaultInstance();
        }

        public lab4.snakes.SnakesProto.GameMessage.ErrorMsg build() {
          lab4.snakes.SnakesProto.GameMessage.ErrorMsg result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public lab4.snakes.SnakesProto.GameMessage.ErrorMsg buildPartial() {
          lab4.snakes.SnakesProto.GameMessage.ErrorMsg result = new lab4.snakes.SnakesProto.GameMessage.ErrorMsg(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.errorMessage_ = errorMessage_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof lab4.snakes.SnakesProto.GameMessage.ErrorMsg) {
            return mergeFrom((lab4.snakes.SnakesProto.GameMessage.ErrorMsg)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(lab4.snakes.SnakesProto.GameMessage.ErrorMsg other) {
          if (other == lab4.snakes.SnakesProto.GameMessage.ErrorMsg.getDefaultInstance()) return this;
          if (other.hasErrorMessage()) {
            bitField0_ |= 0x00000001;
            errorMessage_ = other.errorMessage_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasErrorMessage()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          lab4.snakes.SnakesProto.GameMessage.ErrorMsg parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (lab4.snakes.SnakesProto.GameMessage.ErrorMsg) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object errorMessage_ = "";
        /**
         * <code>required string error_message = 1;</code>
         *
         * <pre>
         * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
         * </pre>
         */
        public boolean hasErrorMessage() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required string error_message = 1;</code>
         *
         * <pre>
         * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
         * </pre>
         */
        public java.lang.String getErrorMessage() {
          java.lang.Object ref = errorMessage_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              errorMessage_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string error_message = 1;</code>
         *
         * <pre>
         * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
         * </pre>
         */
        public com.google.protobuf.ByteString
            getErrorMessageBytes() {
          java.lang.Object ref = errorMessage_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            errorMessage_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string error_message = 1;</code>
         *
         * <pre>
         * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
         * </pre>
         */
        public Builder setErrorMessage(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          errorMessage_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required string error_message = 1;</code>
         *
         * <pre>
         * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
         * </pre>
         */
        public Builder clearErrorMessage() {
          bitField0_ = (bitField0_ & ~0x00000001);
          errorMessage_ = getDefaultInstance().getErrorMessage();
          onChanged();
          return this;
        }
        /**
         * <code>required string error_message = 1;</code>
         *
         * <pre>
         * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
         * </pre>
         */
        public Builder setErrorMessageBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          errorMessage_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:lab4.snakes.GameMessage.ErrorMsg)
      }

      // @@protoc_insertion_point(class_scope:lab4.snakes.GameMessage.ErrorMsg)
      private static final lab4.snakes.SnakesProto.GameMessage.ErrorMsg DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GameMessage.ErrorMsg();
      }

      public static lab4.snakes.SnakesProto.GameMessage.ErrorMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<ErrorMsg>
          PARSER = new com.google.protobuf.AbstractParser<ErrorMsg>() {
        public ErrorMsg parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new ErrorMsg(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<ErrorMsg> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ErrorMsg> getParserForType() {
        return PARSER;
      }

      public lab4.snakes.SnakesProto.GameMessage.ErrorMsg getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RoleChangeMsgOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lab4.snakes.GameMessage.RoleChangeMsg)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional .lab4.snakes.NodeRole sender_role = 1;</code>
       */
      boolean hasSenderRole();
      /**
       * <code>optional .lab4.snakes.NodeRole sender_role = 1;</code>
       */
      lab4.snakes.SnakesProto.NodeRole getSenderRole();

      /**
       * <code>optional .lab4.snakes.NodeRole receiver_role = 2;</code>
       */
      boolean hasReceiverRole();
      /**
       * <code>optional .lab4.snakes.NodeRole receiver_role = 2;</code>
       */
      lab4.snakes.SnakesProto.NodeRole getReceiverRole();
    }
    /**
     * Protobuf type {@code lab4.snakes.GameMessage.RoleChangeMsg}
     *
     * <pre>
     * Сообщение о смене роли:
     * 1. от заместителя другим игрокам о том, что пора начинать считать его главным (sender_role = MASTER)
     * 2. от осознанно выходящего игрока (sender_role = VIEWER)
     * 3. от главного к умершему игроку (receiver_role = VIEWER)
     * 4. в комбинации с 1,2 или отдельно от них: назначение кого-то заместителем (receiver_role = DEPUTY)
     * 5. в комбинации с 2 от главного узла заместителю о том, что он становится главным (receiver_role = MASTER)
     * </pre>
     */
    public  static final class RoleChangeMsg extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:lab4.snakes.GameMessage.RoleChangeMsg)
        RoleChangeMsgOrBuilder {
      // Use RoleChangeMsg.newBuilder() to construct.
      private RoleChangeMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private RoleChangeMsg() {
        senderRole_ = 0;
        receiverRole_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private RoleChangeMsg(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                lab4.snakes.SnakesProto.NodeRole value = lab4.snakes.SnakesProto.NodeRole.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  senderRole_ = rawValue;
                }
                break;
              }
              case 16: {
                int rawValue = input.readEnum();
                lab4.snakes.SnakesProto.NodeRole value = lab4.snakes.SnakesProto.NodeRole.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(2, rawValue);
                } else {
                  bitField0_ |= 0x00000002;
                  receiverRole_ = rawValue;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_RoleChangeMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_RoleChangeMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.class, lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.Builder.class);
      }

      private int bitField0_;
      public static final int SENDER_ROLE_FIELD_NUMBER = 1;
      private int senderRole_;
      /**
       * <code>optional .lab4.snakes.NodeRole sender_role = 1;</code>
       */
      public boolean hasSenderRole() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .lab4.snakes.NodeRole sender_role = 1;</code>
       */
      public lab4.snakes.SnakesProto.NodeRole getSenderRole() {
        lab4.snakes.SnakesProto.NodeRole result = lab4.snakes.SnakesProto.NodeRole.valueOf(senderRole_);
        return result == null ? lab4.snakes.SnakesProto.NodeRole.NORMAL : result;
      }

      public static final int RECEIVER_ROLE_FIELD_NUMBER = 2;
      private int receiverRole_;
      /**
       * <code>optional .lab4.snakes.NodeRole receiver_role = 2;</code>
       */
      public boolean hasReceiverRole() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .lab4.snakes.NodeRole receiver_role = 2;</code>
       */
      public lab4.snakes.SnakesProto.NodeRole getReceiverRole() {
        lab4.snakes.SnakesProto.NodeRole result = lab4.snakes.SnakesProto.NodeRole.valueOf(receiverRole_);
        return result == null ? lab4.snakes.SnakesProto.NodeRole.NORMAL : result;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, senderRole_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeEnum(2, receiverRole_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, senderRole_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(2, receiverRole_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code lab4.snakes.GameMessage.RoleChangeMsg}
       *
       * <pre>
       * Сообщение о смене роли:
       * 1. от заместителя другим игрокам о том, что пора начинать считать его главным (sender_role = MASTER)
       * 2. от осознанно выходящего игрока (sender_role = VIEWER)
       * 3. от главного к умершему игроку (receiver_role = VIEWER)
       * 4. в комбинации с 1,2 или отдельно от них: назначение кого-то заместителем (receiver_role = DEPUTY)
       * 5. в комбинации с 2 от главного узла заместителю о том, что он становится главным (receiver_role = MASTER)
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:lab4.snakes.GameMessage.RoleChangeMsg)
          lab4.snakes.SnakesProto.GameMessage.RoleChangeMsgOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_RoleChangeMsg_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_RoleChangeMsg_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.class, lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.Builder.class);
        }

        // Construct using lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          senderRole_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          receiverRole_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_RoleChangeMsg_descriptor;
        }

        public lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg getDefaultInstanceForType() {
          return lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.getDefaultInstance();
        }

        public lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg build() {
          lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg buildPartial() {
          lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg result = new lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.senderRole_ = senderRole_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.receiverRole_ = receiverRole_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg) {
            return mergeFrom((lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg other) {
          if (other == lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.getDefaultInstance()) return this;
          if (other.hasSenderRole()) {
            setSenderRole(other.getSenderRole());
          }
          if (other.hasReceiverRole()) {
            setReceiverRole(other.getReceiverRole());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int senderRole_ = 0;
        /**
         * <code>optional .lab4.snakes.NodeRole sender_role = 1;</code>
         */
        public boolean hasSenderRole() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .lab4.snakes.NodeRole sender_role = 1;</code>
         */
        public lab4.snakes.SnakesProto.NodeRole getSenderRole() {
          lab4.snakes.SnakesProto.NodeRole result = lab4.snakes.SnakesProto.NodeRole.valueOf(senderRole_);
          return result == null ? lab4.snakes.SnakesProto.NodeRole.NORMAL : result;
        }
        /**
         * <code>optional .lab4.snakes.NodeRole sender_role = 1;</code>
         */
        public Builder setSenderRole(lab4.snakes.SnakesProto.NodeRole value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          senderRole_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>optional .lab4.snakes.NodeRole sender_role = 1;</code>
         */
        public Builder clearSenderRole() {
          bitField0_ = (bitField0_ & ~0x00000001);
          senderRole_ = 0;
          onChanged();
          return this;
        }

        private int receiverRole_ = 0;
        /**
         * <code>optional .lab4.snakes.NodeRole receiver_role = 2;</code>
         */
        public boolean hasReceiverRole() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .lab4.snakes.NodeRole receiver_role = 2;</code>
         */
        public lab4.snakes.SnakesProto.NodeRole getReceiverRole() {
          lab4.snakes.SnakesProto.NodeRole result = lab4.snakes.SnakesProto.NodeRole.valueOf(receiverRole_);
          return result == null ? lab4.snakes.SnakesProto.NodeRole.NORMAL : result;
        }
        /**
         * <code>optional .lab4.snakes.NodeRole receiver_role = 2;</code>
         */
        public Builder setReceiverRole(lab4.snakes.SnakesProto.NodeRole value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000002;
          receiverRole_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>optional .lab4.snakes.NodeRole receiver_role = 2;</code>
         */
        public Builder clearReceiverRole() {
          bitField0_ = (bitField0_ & ~0x00000002);
          receiverRole_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:lab4.snakes.GameMessage.RoleChangeMsg)
      }

      // @@protoc_insertion_point(class_scope:lab4.snakes.GameMessage.RoleChangeMsg)
      private static final lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg();
      }

      public static lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<RoleChangeMsg>
          PARSER = new com.google.protobuf.AbstractParser<RoleChangeMsg>() {
        public RoleChangeMsg parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new RoleChangeMsg(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<RoleChangeMsg> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RoleChangeMsg> getParserForType() {
        return PARSER;
      }

      public lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    private int typeCase_ = 0;
    private java.lang.Object type_;
    public enum TypeCase
        implements com.google.protobuf.Internal.EnumLite {
      PING(2),
      STEER(3),
      ACK(4),
      STATE(5),
      ANNOUNCEMENT(6),
      JOIN(7),
      ERROR(8),
      ROLE_CHANGE(9),
      TYPE_NOT_SET(0);
      private int value = 0;
      private TypeCase(int value) {
        this.value = value;
      }
      public static TypeCase valueOf(int value) {
        switch (value) {
          case 2: return PING;
          case 3: return STEER;
          case 4: return ACK;
          case 5: return STATE;
          case 6: return ANNOUNCEMENT;
          case 7: return JOIN;
          case 8: return ERROR;
          case 9: return ROLE_CHANGE;
          case 0: return TYPE_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TypeCase
    getTypeCase() {
      return TypeCase.valueOf(
          typeCase_);
    }

    public static final int MSG_SEQ_FIELD_NUMBER = 1;
    private long msgSeq_;
    /**
     * <code>required int64 msg_seq = 1;</code>
     *
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     */
    public boolean hasMsgSeq() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 msg_seq = 1;</code>
     *
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     */
    public long getMsgSeq() {
      return msgSeq_;
    }

    public static final int SENDER_ID_FIELD_NUMBER = 10;
    private int senderId_;
    /**
     * <code>optional int32 sender_id = 10;</code>
     *
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     */
    public boolean hasSenderId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 sender_id = 10;</code>
     *
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     */
    public int getSenderId() {
      return senderId_;
    }

    public static final int RECEIVER_ID_FIELD_NUMBER = 11;
    private int receiverId_;
    /**
     * <code>optional int32 receiver_id = 11;</code>
     *
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     */
    public boolean hasReceiverId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 receiver_id = 11;</code>
     *
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     */
    public int getReceiverId() {
      return receiverId_;
    }

    public static final int PING_FIELD_NUMBER = 2;
    /**
     * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    public boolean hasPing() {
      return typeCase_ == 2;
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.PingMsg getPing() {
      if (typeCase_ == 2) {
         return (lab4.snakes.SnakesProto.GameMessage.PingMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.PingMsg.getDefaultInstance();
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.PingMsgOrBuilder getPingOrBuilder() {
      if (typeCase_ == 2) {
         return (lab4.snakes.SnakesProto.GameMessage.PingMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.PingMsg.getDefaultInstance();
    }

    public static final int STEER_FIELD_NUMBER = 3;
    /**
     * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    public boolean hasSteer() {
      return typeCase_ == 3;
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.SteerMsg getSteer() {
      if (typeCase_ == 3) {
         return (lab4.snakes.SnakesProto.GameMessage.SteerMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.SteerMsg.getDefaultInstance();
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.SteerMsgOrBuilder getSteerOrBuilder() {
      if (typeCase_ == 3) {
         return (lab4.snakes.SnakesProto.GameMessage.SteerMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.SteerMsg.getDefaultInstance();
    }

    public static final int ACK_FIELD_NUMBER = 4;
    /**
     * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    public boolean hasAck() {
      return typeCase_ == 4;
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.AckMsg getAck() {
      if (typeCase_ == 4) {
         return (lab4.snakes.SnakesProto.GameMessage.AckMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.AckMsg.getDefaultInstance();
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.AckMsgOrBuilder getAckOrBuilder() {
      if (typeCase_ == 4) {
         return (lab4.snakes.SnakesProto.GameMessage.AckMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.AckMsg.getDefaultInstance();
    }

    public static final int STATE_FIELD_NUMBER = 5;
    /**
     * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
     */
    public boolean hasState() {
      return typeCase_ == 5;
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.StateMsg getState() {
      if (typeCase_ == 5) {
         return (lab4.snakes.SnakesProto.GameMessage.StateMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.StateMsg.getDefaultInstance();
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.StateMsgOrBuilder getStateOrBuilder() {
      if (typeCase_ == 5) {
         return (lab4.snakes.SnakesProto.GameMessage.StateMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.StateMsg.getDefaultInstance();
    }

    public static final int ANNOUNCEMENT_FIELD_NUMBER = 6;
    /**
     * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    public boolean hasAnnouncement() {
      return typeCase_ == 6;
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg getAnnouncement() {
      if (typeCase_ == 6) {
         return (lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.getDefaultInstance();
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.AnnouncementMsgOrBuilder getAnnouncementOrBuilder() {
      if (typeCase_ == 6) {
         return (lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.getDefaultInstance();
    }

    public static final int JOIN_FIELD_NUMBER = 7;
    /**
     * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    public boolean hasJoin() {
      return typeCase_ == 7;
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.JoinMsg getJoin() {
      if (typeCase_ == 7) {
         return (lab4.snakes.SnakesProto.GameMessage.JoinMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.JoinMsg.getDefaultInstance();
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.JoinMsgOrBuilder getJoinOrBuilder() {
      if (typeCase_ == 7) {
         return (lab4.snakes.SnakesProto.GameMessage.JoinMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.JoinMsg.getDefaultInstance();
    }

    public static final int ERROR_FIELD_NUMBER = 8;
    /**
     * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    public boolean hasError() {
      return typeCase_ == 8;
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.ErrorMsg getError() {
      if (typeCase_ == 8) {
         return (lab4.snakes.SnakesProto.GameMessage.ErrorMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.ErrorMsg.getDefaultInstance();
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.ErrorMsgOrBuilder getErrorOrBuilder() {
      if (typeCase_ == 8) {
         return (lab4.snakes.SnakesProto.GameMessage.ErrorMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.ErrorMsg.getDefaultInstance();
    }

    public static final int ROLE_CHANGE_FIELD_NUMBER = 9;
    /**
     * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    public boolean hasRoleChange() {
      return typeCase_ == 9;
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg getRoleChange() {
      if (typeCase_ == 9) {
         return (lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.getDefaultInstance();
    }
    /**
     * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    public lab4.snakes.SnakesProto.GameMessage.RoleChangeMsgOrBuilder getRoleChangeOrBuilder() {
      if (typeCase_ == 9) {
         return (lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg) type_;
      }
      return lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMsgSeq()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasSteer()) {
        if (!getSteer().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasState()) {
        if (!getState().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasAnnouncement()) {
        if (!getAnnouncement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasJoin()) {
        if (!getJoin().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasError()) {
        if (!getError().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, msgSeq_);
      }
      if (typeCase_ == 2) {
        output.writeMessage(2, (lab4.snakes.SnakesProto.GameMessage.PingMsg) type_);
      }
      if (typeCase_ == 3) {
        output.writeMessage(3, (lab4.snakes.SnakesProto.GameMessage.SteerMsg) type_);
      }
      if (typeCase_ == 4) {
        output.writeMessage(4, (lab4.snakes.SnakesProto.GameMessage.AckMsg) type_);
      }
      if (typeCase_ == 5) {
        output.writeMessage(5, (lab4.snakes.SnakesProto.GameMessage.StateMsg) type_);
      }
      if (typeCase_ == 6) {
        output.writeMessage(6, (lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg) type_);
      }
      if (typeCase_ == 7) {
        output.writeMessage(7, (lab4.snakes.SnakesProto.GameMessage.JoinMsg) type_);
      }
      if (typeCase_ == 8) {
        output.writeMessage(8, (lab4.snakes.SnakesProto.GameMessage.ErrorMsg) type_);
      }
      if (typeCase_ == 9) {
        output.writeMessage(9, (lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg) type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(10, senderId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(11, receiverId_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, msgSeq_);
      }
      if (typeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (lab4.snakes.SnakesProto.GameMessage.PingMsg) type_);
      }
      if (typeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (lab4.snakes.SnakesProto.GameMessage.SteerMsg) type_);
      }
      if (typeCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (lab4.snakes.SnakesProto.GameMessage.AckMsg) type_);
      }
      if (typeCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (lab4.snakes.SnakesProto.GameMessage.StateMsg) type_);
      }
      if (typeCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg) type_);
      }
      if (typeCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (lab4.snakes.SnakesProto.GameMessage.JoinMsg) type_);
      }
      if (typeCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, (lab4.snakes.SnakesProto.GameMessage.ErrorMsg) type_);
      }
      if (typeCase_ == 9) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, (lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg) type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, senderId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, receiverId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static lab4.snakes.SnakesProto.GameMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static lab4.snakes.SnakesProto.GameMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GameMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static lab4.snakes.SnakesProto.GameMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GameMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static lab4.snakes.SnakesProto.GameMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GameMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static lab4.snakes.SnakesProto.GameMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static lab4.snakes.SnakesProto.GameMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static lab4.snakes.SnakesProto.GameMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lab4.snakes.SnakesProto.GameMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lab4.snakes.GameMessage}
     *
     * <pre>
     * Общий формат любого сообщения
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:lab4.snakes.GameMessage)
        lab4.snakes.SnakesProto.GameMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lab4.snakes.SnakesProto.GameMessage.class, lab4.snakes.SnakesProto.GameMessage.Builder.class);
      }

      // Construct using lab4.snakes.SnakesProto.GameMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        msgSeq_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        senderId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        receiverId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        typeCase_ = 0;
        type_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return lab4.snakes.SnakesProto.internal_static_lab4_snakes_GameMessage_descriptor;
      }

      public lab4.snakes.SnakesProto.GameMessage getDefaultInstanceForType() {
        return lab4.snakes.SnakesProto.GameMessage.getDefaultInstance();
      }

      public lab4.snakes.SnakesProto.GameMessage build() {
        lab4.snakes.SnakesProto.GameMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public lab4.snakes.SnakesProto.GameMessage buildPartial() {
        lab4.snakes.SnakesProto.GameMessage result = new lab4.snakes.SnakesProto.GameMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.msgSeq_ = msgSeq_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.senderId_ = senderId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.receiverId_ = receiverId_;
        if (typeCase_ == 2) {
          if (pingBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = pingBuilder_.build();
          }
        }
        if (typeCase_ == 3) {
          if (steerBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = steerBuilder_.build();
          }
        }
        if (typeCase_ == 4) {
          if (ackBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = ackBuilder_.build();
          }
        }
        if (typeCase_ == 5) {
          if (stateBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = stateBuilder_.build();
          }
        }
        if (typeCase_ == 6) {
          if (announcementBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = announcementBuilder_.build();
          }
        }
        if (typeCase_ == 7) {
          if (joinBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = joinBuilder_.build();
          }
        }
        if (typeCase_ == 8) {
          if (errorBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = errorBuilder_.build();
          }
        }
        if (typeCase_ == 9) {
          if (roleChangeBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = roleChangeBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.typeCase_ = typeCase_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof lab4.snakes.SnakesProto.GameMessage) {
          return mergeFrom((lab4.snakes.SnakesProto.GameMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(lab4.snakes.SnakesProto.GameMessage other) {
        if (other == lab4.snakes.SnakesProto.GameMessage.getDefaultInstance()) return this;
        if (other.hasMsgSeq()) {
          setMsgSeq(other.getMsgSeq());
        }
        if (other.hasSenderId()) {
          setSenderId(other.getSenderId());
        }
        if (other.hasReceiverId()) {
          setReceiverId(other.getReceiverId());
        }
        switch (other.getTypeCase()) {
          case PING: {
            mergePing(other.getPing());
            break;
          }
          case STEER: {
            mergeSteer(other.getSteer());
            break;
          }
          case ACK: {
            mergeAck(other.getAck());
            break;
          }
          case STATE: {
            mergeState(other.getState());
            break;
          }
          case ANNOUNCEMENT: {
            mergeAnnouncement(other.getAnnouncement());
            break;
          }
          case JOIN: {
            mergeJoin(other.getJoin());
            break;
          }
          case ERROR: {
            mergeError(other.getError());
            break;
          }
          case ROLE_CHANGE: {
            mergeRoleChange(other.getRoleChange());
            break;
          }
          case TYPE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMsgSeq()) {
          return false;
        }
        if (hasSteer()) {
          if (!getSteer().isInitialized()) {
            return false;
          }
        }
        if (hasState()) {
          if (!getState().isInitialized()) {
            return false;
          }
        }
        if (hasAnnouncement()) {
          if (!getAnnouncement().isInitialized()) {
            return false;
          }
        }
        if (hasJoin()) {
          if (!getJoin().isInitialized()) {
            return false;
          }
        }
        if (hasError()) {
          if (!getError().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        lab4.snakes.SnakesProto.GameMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (lab4.snakes.SnakesProto.GameMessage) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int typeCase_ = 0;
      private java.lang.Object type_;
      public TypeCase
          getTypeCase() {
        return TypeCase.valueOf(
            typeCase_);
      }

      public Builder clearType() {
        typeCase_ = 0;
        type_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private long msgSeq_ ;
      /**
       * <code>required int64 msg_seq = 1;</code>
       *
       * <pre>
       * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
       * </pre>
       */
      public boolean hasMsgSeq() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 msg_seq = 1;</code>
       *
       * <pre>
       * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
       * </pre>
       */
      public long getMsgSeq() {
        return msgSeq_;
      }
      /**
       * <code>required int64 msg_seq = 1;</code>
       *
       * <pre>
       * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
       * </pre>
       */
      public Builder setMsgSeq(long value) {
        bitField0_ |= 0x00000001;
        msgSeq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 msg_seq = 1;</code>
       *
       * <pre>
       * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
       * </pre>
       */
      public Builder clearMsgSeq() {
        bitField0_ = (bitField0_ & ~0x00000001);
        msgSeq_ = 0L;
        onChanged();
        return this;
      }

      private int senderId_ ;
      /**
       * <code>optional int32 sender_id = 10;</code>
       *
       * <pre>
       * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       */
      public boolean hasSenderId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 sender_id = 10;</code>
       *
       * <pre>
       * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       */
      public int getSenderId() {
        return senderId_;
      }
      /**
       * <code>optional int32 sender_id = 10;</code>
       *
       * <pre>
       * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       */
      public Builder setSenderId(int value) {
        bitField0_ |= 0x00000002;
        senderId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 sender_id = 10;</code>
       *
       * <pre>
       * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       */
      public Builder clearSenderId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        senderId_ = 0;
        onChanged();
        return this;
      }

      private int receiverId_ ;
      /**
       * <code>optional int32 receiver_id = 11;</code>
       *
       * <pre>
       * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       */
      public boolean hasReceiverId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 receiver_id = 11;</code>
       *
       * <pre>
       * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       */
      public int getReceiverId() {
        return receiverId_;
      }
      /**
       * <code>optional int32 receiver_id = 11;</code>
       *
       * <pre>
       * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       */
      public Builder setReceiverId(int value) {
        bitField0_ |= 0x00000004;
        receiverId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 receiver_id = 11;</code>
       *
       * <pre>
       * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
       * </pre>
       */
      public Builder clearReceiverId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        receiverId_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.PingMsg, lab4.snakes.SnakesProto.GameMessage.PingMsg.Builder, lab4.snakes.SnakesProto.GameMessage.PingMsgOrBuilder> pingBuilder_;
      /**
       * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      public boolean hasPing() {
        return typeCase_ == 2;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.PingMsg getPing() {
        if (pingBuilder_ == null) {
          if (typeCase_ == 2) {
            return (lab4.snakes.SnakesProto.GameMessage.PingMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.PingMsg.getDefaultInstance();
        } else {
          if (typeCase_ == 2) {
            return pingBuilder_.getMessage();
          }
          return lab4.snakes.SnakesProto.GameMessage.PingMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      public Builder setPing(lab4.snakes.SnakesProto.GameMessage.PingMsg value) {
        if (pingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          pingBuilder_.setMessage(value);
        }
        typeCase_ = 2;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      public Builder setPing(
          lab4.snakes.SnakesProto.GameMessage.PingMsg.Builder builderForValue) {
        if (pingBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          pingBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 2;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      public Builder mergePing(lab4.snakes.SnakesProto.GameMessage.PingMsg value) {
        if (pingBuilder_ == null) {
          if (typeCase_ == 2 &&
              type_ != lab4.snakes.SnakesProto.GameMessage.PingMsg.getDefaultInstance()) {
            type_ = lab4.snakes.SnakesProto.GameMessage.PingMsg.newBuilder((lab4.snakes.SnakesProto.GameMessage.PingMsg) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 2) {
            pingBuilder_.mergeFrom(value);
          }
          pingBuilder_.setMessage(value);
        }
        typeCase_ = 2;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      public Builder clearPing() {
        if (pingBuilder_ == null) {
          if (typeCase_ == 2) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 2) {
            typeCase_ = 0;
            type_ = null;
          }
          pingBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.PingMsg.Builder getPingBuilder() {
        return getPingFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.PingMsgOrBuilder getPingOrBuilder() {
        if ((typeCase_ == 2) && (pingBuilder_ != null)) {
          return pingBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 2) {
            return (lab4.snakes.SnakesProto.GameMessage.PingMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.PingMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.PingMsg ping = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.PingMsg, lab4.snakes.SnakesProto.GameMessage.PingMsg.Builder, lab4.snakes.SnakesProto.GameMessage.PingMsgOrBuilder> 
          getPingFieldBuilder() {
        if (pingBuilder_ == null) {
          if (!(typeCase_ == 2)) {
            type_ = lab4.snakes.SnakesProto.GameMessage.PingMsg.getDefaultInstance();
          }
          pingBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              lab4.snakes.SnakesProto.GameMessage.PingMsg, lab4.snakes.SnakesProto.GameMessage.PingMsg.Builder, lab4.snakes.SnakesProto.GameMessage.PingMsgOrBuilder>(
                  (lab4.snakes.SnakesProto.GameMessage.PingMsg) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 2;
        onChanged();;
        return pingBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.SteerMsg, lab4.snakes.SnakesProto.GameMessage.SteerMsg.Builder, lab4.snakes.SnakesProto.GameMessage.SteerMsgOrBuilder> steerBuilder_;
      /**
       * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      public boolean hasSteer() {
        return typeCase_ == 3;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.SteerMsg getSteer() {
        if (steerBuilder_ == null) {
          if (typeCase_ == 3) {
            return (lab4.snakes.SnakesProto.GameMessage.SteerMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.SteerMsg.getDefaultInstance();
        } else {
          if (typeCase_ == 3) {
            return steerBuilder_.getMessage();
          }
          return lab4.snakes.SnakesProto.GameMessage.SteerMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      public Builder setSteer(lab4.snakes.SnakesProto.GameMessage.SteerMsg value) {
        if (steerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          steerBuilder_.setMessage(value);
        }
        typeCase_ = 3;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      public Builder setSteer(
          lab4.snakes.SnakesProto.GameMessage.SteerMsg.Builder builderForValue) {
        if (steerBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          steerBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 3;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      public Builder mergeSteer(lab4.snakes.SnakesProto.GameMessage.SteerMsg value) {
        if (steerBuilder_ == null) {
          if (typeCase_ == 3 &&
              type_ != lab4.snakes.SnakesProto.GameMessage.SteerMsg.getDefaultInstance()) {
            type_ = lab4.snakes.SnakesProto.GameMessage.SteerMsg.newBuilder((lab4.snakes.SnakesProto.GameMessage.SteerMsg) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 3) {
            steerBuilder_.mergeFrom(value);
          }
          steerBuilder_.setMessage(value);
        }
        typeCase_ = 3;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      public Builder clearSteer() {
        if (steerBuilder_ == null) {
          if (typeCase_ == 3) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 3) {
            typeCase_ = 0;
            type_ = null;
          }
          steerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.SteerMsg.Builder getSteerBuilder() {
        return getSteerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.SteerMsgOrBuilder getSteerOrBuilder() {
        if ((typeCase_ == 3) && (steerBuilder_ != null)) {
          return steerBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 3) {
            return (lab4.snakes.SnakesProto.GameMessage.SteerMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.SteerMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.SteerMsg steer = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.SteerMsg, lab4.snakes.SnakesProto.GameMessage.SteerMsg.Builder, lab4.snakes.SnakesProto.GameMessage.SteerMsgOrBuilder> 
          getSteerFieldBuilder() {
        if (steerBuilder_ == null) {
          if (!(typeCase_ == 3)) {
            type_ = lab4.snakes.SnakesProto.GameMessage.SteerMsg.getDefaultInstance();
          }
          steerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              lab4.snakes.SnakesProto.GameMessage.SteerMsg, lab4.snakes.SnakesProto.GameMessage.SteerMsg.Builder, lab4.snakes.SnakesProto.GameMessage.SteerMsgOrBuilder>(
                  (lab4.snakes.SnakesProto.GameMessage.SteerMsg) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 3;
        onChanged();;
        return steerBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.AckMsg, lab4.snakes.SnakesProto.GameMessage.AckMsg.Builder, lab4.snakes.SnakesProto.GameMessage.AckMsgOrBuilder> ackBuilder_;
      /**
       * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      public boolean hasAck() {
        return typeCase_ == 4;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.AckMsg getAck() {
        if (ackBuilder_ == null) {
          if (typeCase_ == 4) {
            return (lab4.snakes.SnakesProto.GameMessage.AckMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.AckMsg.getDefaultInstance();
        } else {
          if (typeCase_ == 4) {
            return ackBuilder_.getMessage();
          }
          return lab4.snakes.SnakesProto.GameMessage.AckMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      public Builder setAck(lab4.snakes.SnakesProto.GameMessage.AckMsg value) {
        if (ackBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          ackBuilder_.setMessage(value);
        }
        typeCase_ = 4;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      public Builder setAck(
          lab4.snakes.SnakesProto.GameMessage.AckMsg.Builder builderForValue) {
        if (ackBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          ackBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 4;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      public Builder mergeAck(lab4.snakes.SnakesProto.GameMessage.AckMsg value) {
        if (ackBuilder_ == null) {
          if (typeCase_ == 4 &&
              type_ != lab4.snakes.SnakesProto.GameMessage.AckMsg.getDefaultInstance()) {
            type_ = lab4.snakes.SnakesProto.GameMessage.AckMsg.newBuilder((lab4.snakes.SnakesProto.GameMessage.AckMsg) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 4) {
            ackBuilder_.mergeFrom(value);
          }
          ackBuilder_.setMessage(value);
        }
        typeCase_ = 4;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      public Builder clearAck() {
        if (ackBuilder_ == null) {
          if (typeCase_ == 4) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 4) {
            typeCase_ = 0;
            type_ = null;
          }
          ackBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.AckMsg.Builder getAckBuilder() {
        return getAckFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.AckMsgOrBuilder getAckOrBuilder() {
        if ((typeCase_ == 4) && (ackBuilder_ != null)) {
          return ackBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 4) {
            return (lab4.snakes.SnakesProto.GameMessage.AckMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.AckMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AckMsg ack = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.AckMsg, lab4.snakes.SnakesProto.GameMessage.AckMsg.Builder, lab4.snakes.SnakesProto.GameMessage.AckMsgOrBuilder> 
          getAckFieldBuilder() {
        if (ackBuilder_ == null) {
          if (!(typeCase_ == 4)) {
            type_ = lab4.snakes.SnakesProto.GameMessage.AckMsg.getDefaultInstance();
          }
          ackBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              lab4.snakes.SnakesProto.GameMessage.AckMsg, lab4.snakes.SnakesProto.GameMessage.AckMsg.Builder, lab4.snakes.SnakesProto.GameMessage.AckMsgOrBuilder>(
                  (lab4.snakes.SnakesProto.GameMessage.AckMsg) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 4;
        onChanged();;
        return ackBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.StateMsg, lab4.snakes.SnakesProto.GameMessage.StateMsg.Builder, lab4.snakes.SnakesProto.GameMessage.StateMsgOrBuilder> stateBuilder_;
      /**
       * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
       */
      public boolean hasState() {
        return typeCase_ == 5;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.StateMsg getState() {
        if (stateBuilder_ == null) {
          if (typeCase_ == 5) {
            return (lab4.snakes.SnakesProto.GameMessage.StateMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.StateMsg.getDefaultInstance();
        } else {
          if (typeCase_ == 5) {
            return stateBuilder_.getMessage();
          }
          return lab4.snakes.SnakesProto.GameMessage.StateMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
       */
      public Builder setState(lab4.snakes.SnakesProto.GameMessage.StateMsg value) {
        if (stateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          stateBuilder_.setMessage(value);
        }
        typeCase_ = 5;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
       */
      public Builder setState(
          lab4.snakes.SnakesProto.GameMessage.StateMsg.Builder builderForValue) {
        if (stateBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          stateBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 5;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
       */
      public Builder mergeState(lab4.snakes.SnakesProto.GameMessage.StateMsg value) {
        if (stateBuilder_ == null) {
          if (typeCase_ == 5 &&
              type_ != lab4.snakes.SnakesProto.GameMessage.StateMsg.getDefaultInstance()) {
            type_ = lab4.snakes.SnakesProto.GameMessage.StateMsg.newBuilder((lab4.snakes.SnakesProto.GameMessage.StateMsg) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 5) {
            stateBuilder_.mergeFrom(value);
          }
          stateBuilder_.setMessage(value);
        }
        typeCase_ = 5;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
       */
      public Builder clearState() {
        if (stateBuilder_ == null) {
          if (typeCase_ == 5) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 5) {
            typeCase_ = 0;
            type_ = null;
          }
          stateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.StateMsg.Builder getStateBuilder() {
        return getStateFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.StateMsgOrBuilder getStateOrBuilder() {
        if ((typeCase_ == 5) && (stateBuilder_ != null)) {
          return stateBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 5) {
            return (lab4.snakes.SnakesProto.GameMessage.StateMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.StateMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.StateMsg state = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.StateMsg, lab4.snakes.SnakesProto.GameMessage.StateMsg.Builder, lab4.snakes.SnakesProto.GameMessage.StateMsgOrBuilder> 
          getStateFieldBuilder() {
        if (stateBuilder_ == null) {
          if (!(typeCase_ == 5)) {
            type_ = lab4.snakes.SnakesProto.GameMessage.StateMsg.getDefaultInstance();
          }
          stateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              lab4.snakes.SnakesProto.GameMessage.StateMsg, lab4.snakes.SnakesProto.GameMessage.StateMsg.Builder, lab4.snakes.SnakesProto.GameMessage.StateMsgOrBuilder>(
                  (lab4.snakes.SnakesProto.GameMessage.StateMsg) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 5;
        onChanged();;
        return stateBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg, lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.Builder, lab4.snakes.SnakesProto.GameMessage.AnnouncementMsgOrBuilder> announcementBuilder_;
      /**
       * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      public boolean hasAnnouncement() {
        return typeCase_ == 6;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg getAnnouncement() {
        if (announcementBuilder_ == null) {
          if (typeCase_ == 6) {
            return (lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.getDefaultInstance();
        } else {
          if (typeCase_ == 6) {
            return announcementBuilder_.getMessage();
          }
          return lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      public Builder setAnnouncement(lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg value) {
        if (announcementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          announcementBuilder_.setMessage(value);
        }
        typeCase_ = 6;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      public Builder setAnnouncement(
          lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.Builder builderForValue) {
        if (announcementBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          announcementBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 6;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      public Builder mergeAnnouncement(lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg value) {
        if (announcementBuilder_ == null) {
          if (typeCase_ == 6 &&
              type_ != lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.getDefaultInstance()) {
            type_ = lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.newBuilder((lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 6) {
            announcementBuilder_.mergeFrom(value);
          }
          announcementBuilder_.setMessage(value);
        }
        typeCase_ = 6;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      public Builder clearAnnouncement() {
        if (announcementBuilder_ == null) {
          if (typeCase_ == 6) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 6) {
            typeCase_ = 0;
            type_ = null;
          }
          announcementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.Builder getAnnouncementBuilder() {
        return getAnnouncementFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.AnnouncementMsgOrBuilder getAnnouncementOrBuilder() {
        if ((typeCase_ == 6) && (announcementBuilder_ != null)) {
          return announcementBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 6) {
            return (lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg, lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.Builder, lab4.snakes.SnakesProto.GameMessage.AnnouncementMsgOrBuilder> 
          getAnnouncementFieldBuilder() {
        if (announcementBuilder_ == null) {
          if (!(typeCase_ == 6)) {
            type_ = lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.getDefaultInstance();
          }
          announcementBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg, lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg.Builder, lab4.snakes.SnakesProto.GameMessage.AnnouncementMsgOrBuilder>(
                  (lab4.snakes.SnakesProto.GameMessage.AnnouncementMsg) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 6;
        onChanged();;
        return announcementBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.JoinMsg, lab4.snakes.SnakesProto.GameMessage.JoinMsg.Builder, lab4.snakes.SnakesProto.GameMessage.JoinMsgOrBuilder> joinBuilder_;
      /**
       * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      public boolean hasJoin() {
        return typeCase_ == 7;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.JoinMsg getJoin() {
        if (joinBuilder_ == null) {
          if (typeCase_ == 7) {
            return (lab4.snakes.SnakesProto.GameMessage.JoinMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.JoinMsg.getDefaultInstance();
        } else {
          if (typeCase_ == 7) {
            return joinBuilder_.getMessage();
          }
          return lab4.snakes.SnakesProto.GameMessage.JoinMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      public Builder setJoin(lab4.snakes.SnakesProto.GameMessage.JoinMsg value) {
        if (joinBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          joinBuilder_.setMessage(value);
        }
        typeCase_ = 7;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      public Builder setJoin(
          lab4.snakes.SnakesProto.GameMessage.JoinMsg.Builder builderForValue) {
        if (joinBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          joinBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 7;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      public Builder mergeJoin(lab4.snakes.SnakesProto.GameMessage.JoinMsg value) {
        if (joinBuilder_ == null) {
          if (typeCase_ == 7 &&
              type_ != lab4.snakes.SnakesProto.GameMessage.JoinMsg.getDefaultInstance()) {
            type_ = lab4.snakes.SnakesProto.GameMessage.JoinMsg.newBuilder((lab4.snakes.SnakesProto.GameMessage.JoinMsg) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 7) {
            joinBuilder_.mergeFrom(value);
          }
          joinBuilder_.setMessage(value);
        }
        typeCase_ = 7;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      public Builder clearJoin() {
        if (joinBuilder_ == null) {
          if (typeCase_ == 7) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 7) {
            typeCase_ = 0;
            type_ = null;
          }
          joinBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.JoinMsg.Builder getJoinBuilder() {
        return getJoinFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.JoinMsgOrBuilder getJoinOrBuilder() {
        if ((typeCase_ == 7) && (joinBuilder_ != null)) {
          return joinBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 7) {
            return (lab4.snakes.SnakesProto.GameMessage.JoinMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.JoinMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.JoinMsg join = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.JoinMsg, lab4.snakes.SnakesProto.GameMessage.JoinMsg.Builder, lab4.snakes.SnakesProto.GameMessage.JoinMsgOrBuilder> 
          getJoinFieldBuilder() {
        if (joinBuilder_ == null) {
          if (!(typeCase_ == 7)) {
            type_ = lab4.snakes.SnakesProto.GameMessage.JoinMsg.getDefaultInstance();
          }
          joinBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              lab4.snakes.SnakesProto.GameMessage.JoinMsg, lab4.snakes.SnakesProto.GameMessage.JoinMsg.Builder, lab4.snakes.SnakesProto.GameMessage.JoinMsgOrBuilder>(
                  (lab4.snakes.SnakesProto.GameMessage.JoinMsg) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 7;
        onChanged();;
        return joinBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.ErrorMsg, lab4.snakes.SnakesProto.GameMessage.ErrorMsg.Builder, lab4.snakes.SnakesProto.GameMessage.ErrorMsgOrBuilder> errorBuilder_;
      /**
       * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      public boolean hasError() {
        return typeCase_ == 8;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.ErrorMsg getError() {
        if (errorBuilder_ == null) {
          if (typeCase_ == 8) {
            return (lab4.snakes.SnakesProto.GameMessage.ErrorMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.ErrorMsg.getDefaultInstance();
        } else {
          if (typeCase_ == 8) {
            return errorBuilder_.getMessage();
          }
          return lab4.snakes.SnakesProto.GameMessage.ErrorMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      public Builder setError(lab4.snakes.SnakesProto.GameMessage.ErrorMsg value) {
        if (errorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          errorBuilder_.setMessage(value);
        }
        typeCase_ = 8;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      public Builder setError(
          lab4.snakes.SnakesProto.GameMessage.ErrorMsg.Builder builderForValue) {
        if (errorBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          errorBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 8;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      public Builder mergeError(lab4.snakes.SnakesProto.GameMessage.ErrorMsg value) {
        if (errorBuilder_ == null) {
          if (typeCase_ == 8 &&
              type_ != lab4.snakes.SnakesProto.GameMessage.ErrorMsg.getDefaultInstance()) {
            type_ = lab4.snakes.SnakesProto.GameMessage.ErrorMsg.newBuilder((lab4.snakes.SnakesProto.GameMessage.ErrorMsg) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 8) {
            errorBuilder_.mergeFrom(value);
          }
          errorBuilder_.setMessage(value);
        }
        typeCase_ = 8;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      public Builder clearError() {
        if (errorBuilder_ == null) {
          if (typeCase_ == 8) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 8) {
            typeCase_ = 0;
            type_ = null;
          }
          errorBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.ErrorMsg.Builder getErrorBuilder() {
        return getErrorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.ErrorMsgOrBuilder getErrorOrBuilder() {
        if ((typeCase_ == 8) && (errorBuilder_ != null)) {
          return errorBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 8) {
            return (lab4.snakes.SnakesProto.GameMessage.ErrorMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.ErrorMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.ErrorMsg error = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.ErrorMsg, lab4.snakes.SnakesProto.GameMessage.ErrorMsg.Builder, lab4.snakes.SnakesProto.GameMessage.ErrorMsgOrBuilder> 
          getErrorFieldBuilder() {
        if (errorBuilder_ == null) {
          if (!(typeCase_ == 8)) {
            type_ = lab4.snakes.SnakesProto.GameMessage.ErrorMsg.getDefaultInstance();
          }
          errorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              lab4.snakes.SnakesProto.GameMessage.ErrorMsg, lab4.snakes.SnakesProto.GameMessage.ErrorMsg.Builder, lab4.snakes.SnakesProto.GameMessage.ErrorMsgOrBuilder>(
                  (lab4.snakes.SnakesProto.GameMessage.ErrorMsg) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 8;
        onChanged();;
        return errorBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg, lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.Builder, lab4.snakes.SnakesProto.GameMessage.RoleChangeMsgOrBuilder> roleChangeBuilder_;
      /**
       * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      public boolean hasRoleChange() {
        return typeCase_ == 9;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg getRoleChange() {
        if (roleChangeBuilder_ == null) {
          if (typeCase_ == 9) {
            return (lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.getDefaultInstance();
        } else {
          if (typeCase_ == 9) {
            return roleChangeBuilder_.getMessage();
          }
          return lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      public Builder setRoleChange(lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg value) {
        if (roleChangeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          roleChangeBuilder_.setMessage(value);
        }
        typeCase_ = 9;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      public Builder setRoleChange(
          lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.Builder builderForValue) {
        if (roleChangeBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          roleChangeBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 9;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      public Builder mergeRoleChange(lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg value) {
        if (roleChangeBuilder_ == null) {
          if (typeCase_ == 9 &&
              type_ != lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.getDefaultInstance()) {
            type_ = lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.newBuilder((lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 9) {
            roleChangeBuilder_.mergeFrom(value);
          }
          roleChangeBuilder_.setMessage(value);
        }
        typeCase_ = 9;
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      public Builder clearRoleChange() {
        if (roleChangeBuilder_ == null) {
          if (typeCase_ == 9) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 9) {
            typeCase_ = 0;
            type_ = null;
          }
          roleChangeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.Builder getRoleChangeBuilder() {
        return getRoleChangeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      public lab4.snakes.SnakesProto.GameMessage.RoleChangeMsgOrBuilder getRoleChangeOrBuilder() {
        if ((typeCase_ == 9) && (roleChangeBuilder_ != null)) {
          return roleChangeBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 9) {
            return (lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg) type_;
          }
          return lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.getDefaultInstance();
        }
      }
      /**
       * <code>optional .lab4.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg, lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.Builder, lab4.snakes.SnakesProto.GameMessage.RoleChangeMsgOrBuilder> 
          getRoleChangeFieldBuilder() {
        if (roleChangeBuilder_ == null) {
          if (!(typeCase_ == 9)) {
            type_ = lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.getDefaultInstance();
          }
          roleChangeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg, lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg.Builder, lab4.snakes.SnakesProto.GameMessage.RoleChangeMsgOrBuilder>(
                  (lab4.snakes.SnakesProto.GameMessage.RoleChangeMsg) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 9;
        onChanged();;
        return roleChangeBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:lab4.snakes.GameMessage)
    }

    // @@protoc_insertion_point(class_scope:lab4.snakes.GameMessage)
    private static final lab4.snakes.SnakesProto.GameMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new lab4.snakes.SnakesProto.GameMessage();
    }

    public static lab4.snakes.SnakesProto.GameMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<GameMessage>
        PARSER = new com.google.protobuf.AbstractParser<GameMessage>() {
      public GameMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new GameMessage(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<GameMessage> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GameMessage> getParserForType() {
      return PARSER;
    }

    public lab4.snakes.SnakesProto.GameMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GamePlayer_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GamePlayer_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GameConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GameConfig_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GamePlayers_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GamePlayers_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GameState_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GameState_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GameState_Coord_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GameState_Coord_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GameState_Snake_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GameState_Snake_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GameMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GameMessage_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GameMessage_PingMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GameMessage_PingMsg_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GameMessage_SteerMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GameMessage_SteerMsg_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GameMessage_AckMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GameMessage_AckMsg_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GameMessage_StateMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GameMessage_StateMsg_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GameMessage_AnnouncementMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GameMessage_AnnouncementMsg_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GameMessage_JoinMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GameMessage_JoinMsg_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GameMessage_ErrorMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GameMessage_ErrorMsg_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lab4_snakes_GameMessage_RoleChangeMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lab4_snakes_GameMessage_RoleChangeMsg_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014snakes.proto\022\013lab4.snakes\"\252\001\n\nGamePlay" +
      "er\022\014\n\004name\030\001 \002(\t\022\n\n\002id\030\002 \002(\005\022\022\n\nip_addre" +
      "ss\030\003 \002(\t\022\014\n\004port\030\004 \002(\005\022#\n\004role\030\005 \002(\0162\025.l" +
      "ab4.snakes.NodeRole\022,\n\004type\030\006 \001(\0162\027.lab4" +
      ".snakes.PlayerType:\005HUMAN\022\r\n\005score\030\007 \002(\005" +
      "\"\334\001\n\nGameConfig\022\021\n\005width\030\001 \001(\005:\00240\022\022\n\006he" +
      "ight\030\002 \001(\005:\00230\022\026\n\013food_static\030\003 \001(\005:\0011\022\032" +
      "\n\017food_per_player\030\004 \001(\002:\0011\022\034\n\016state_dela" +
      "y_ms\030\005 \001(\005:\0041000\022\033\n\016dead_food_prob\030\006 \001(\002" +
      ":\0030.1\022\032\n\rping_delay_ms\030\007 \001(\005:\003100\022\034\n\017nod",
      "e_timeout_ms\030\010 \001(\005:\003800\"7\n\013GamePlayers\022(" +
      "\n\007players\030\001 \003(\0132\027.lab4.snakes.GamePlayer" +
      "\"\323\003\n\tGameState\022\023\n\013state_order\030\001 \002(\005\022,\n\006s" +
      "nakes\030\002 \003(\0132\034.lab4.snakes.GameState.Snak" +
      "e\022+\n\005foods\030\003 \003(\0132\034.lab4.snakes.GameState" +
      ".Coord\022)\n\007players\030\004 \002(\0132\030.lab4.snakes.Ga" +
      "mePlayers\022\'\n\006config\030\005 \002(\0132\027.lab4.snakes." +
      "GameConfig\032#\n\005Coord\022\014\n\001x\030\001 \001(\021:\0010\022\014\n\001y\030\002" +
      " \001(\021:\0010\032\334\001\n\005Snake\022\021\n\tplayer_id\030\001 \002(\005\022,\n\006" +
      "points\030\002 \003(\0132\034.lab4.snakes.GameState.Coo",
      "rd\022=\n\005state\030\003 \002(\0162\'.lab4.snakes.GameStat" +
      "e.Snake.SnakeState:\005ALIVE\022.\n\016head_direct" +
      "ion\030\004 \002(\0162\026.lab4.snakes.Direction\"#\n\nSna" +
      "keState\022\t\n\005ALIVE\020\000\022\n\n\006ZOMBIE\020\001\"\363\007\n\013GameM" +
      "essage\022\017\n\007msg_seq\030\001 \002(\003\022\021\n\tsender_id\030\n \001" +
      "(\005\022\023\n\013receiver_id\030\013 \001(\005\0220\n\004ping\030\002 \001(\0132 ." +
      "lab4.snakes.GameMessage.PingMsgH\000\0222\n\005ste" +
      "er\030\003 \001(\0132!.lab4.snakes.GameMessage.Steer" +
      "MsgH\000\022.\n\003ack\030\004 \001(\0132\037.lab4.snakes.GameMes" +
      "sage.AckMsgH\000\0222\n\005state\030\005 \001(\0132!.lab4.snak",
      "es.GameMessage.StateMsgH\000\022@\n\014announcemen" +
      "t\030\006 \001(\0132(.lab4.snakes.GameMessage.Announ" +
      "cementMsgH\000\0220\n\004join\030\007 \001(\0132 .lab4.snakes." +
      "GameMessage.JoinMsgH\000\0222\n\005error\030\010 \001(\0132!.l" +
      "ab4.snakes.GameMessage.ErrorMsgH\000\022=\n\013rol" +
      "e_change\030\t \001(\0132&.lab4.snakes.GameMessage" +
      ".RoleChangeMsgH\000\032\t\n\007PingMsg\0325\n\010SteerMsg\022" +
      ")\n\tdirection\030\001 \002(\0162\026.lab4.snakes.Directi" +
      "on\032\010\n\006AckMsg\0321\n\010StateMsg\022%\n\005state\030\001 \002(\0132" +
      "\026.lab4.snakes.GameState\032}\n\017AnnouncementM",
      "sg\022)\n\007players\030\001 \002(\0132\030.lab4.snakes.GamePl" +
      "ayers\022\'\n\006config\030\002 \002(\0132\027.lab4.snakes.Game" +
      "Config\022\026\n\010can_join\030\003 \001(\010:\004true\032f\n\007JoinMs" +
      "g\0223\n\013player_type\030\001 \001(\0162\027.lab4.snakes.Pla" +
      "yerType:\005HUMAN\022\030\n\tonly_view\030\002 \001(\010:\005false" +
      "\022\014\n\004name\030\003 \002(\t\032!\n\010ErrorMsg\022\025\n\rerror_mess" +
      "age\030\001 \002(\t\032i\n\rRoleChangeMsg\022*\n\013sender_rol" +
      "e\030\001 \001(\0162\025.lab4.snakes.NodeRole\022,\n\rreceiv" +
      "er_role\030\002 \001(\0162\025.lab4.snakes.NodeRoleB\006\n\004" +
      "Type*:\n\010NodeRole\022\n\n\006NORMAL\020\000\022\n\n\006MASTER\020\001",
      "\022\n\n\006DEPUTY\020\002\022\n\n\006VIEWER\020\003*\"\n\nPlayerType\022\t" +
      "\n\005HUMAN\020\000\022\t\n\005ROBOT\020\001*2\n\tDirection\022\006\n\002UP\020" +
      "\001\022\010\n\004DOWN\020\002\022\010\n\004LEFT\020\003\022\t\n\005RIGHT\020\004B\032\n\013lab4" +
      ".snakesB\013SnakesProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_lab4_snakes_GamePlayer_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_lab4_snakes_GamePlayer_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GamePlayer_descriptor,
        new java.lang.String[] { "Name", "Id", "IpAddress", "Port", "Role", "Type", "Score", });
    internal_static_lab4_snakes_GameConfig_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_lab4_snakes_GameConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GameConfig_descriptor,
        new java.lang.String[] { "Width", "Height", "FoodStatic", "FoodPerPlayer", "StateDelayMs", "DeadFoodProb", "PingDelayMs", "NodeTimeoutMs", });
    internal_static_lab4_snakes_GamePlayers_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_lab4_snakes_GamePlayers_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GamePlayers_descriptor,
        new java.lang.String[] { "Players", });
    internal_static_lab4_snakes_GameState_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_lab4_snakes_GameState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GameState_descriptor,
        new java.lang.String[] { "StateOrder", "Snakes", "Foods", "Players", "Config", });
    internal_static_lab4_snakes_GameState_Coord_descriptor =
      internal_static_lab4_snakes_GameState_descriptor.getNestedTypes().get(0);
    internal_static_lab4_snakes_GameState_Coord_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GameState_Coord_descriptor,
        new java.lang.String[] { "X", "Y", });
    internal_static_lab4_snakes_GameState_Snake_descriptor =
      internal_static_lab4_snakes_GameState_descriptor.getNestedTypes().get(1);
    internal_static_lab4_snakes_GameState_Snake_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GameState_Snake_descriptor,
        new java.lang.String[] { "PlayerId", "Points", "State", "HeadDirection", });
    internal_static_lab4_snakes_GameMessage_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_lab4_snakes_GameMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GameMessage_descriptor,
        new java.lang.String[] { "MsgSeq", "SenderId", "ReceiverId", "Ping", "Steer", "Ack", "State", "Announcement", "Join", "Error", "RoleChange", "Type", });
    internal_static_lab4_snakes_GameMessage_PingMsg_descriptor =
      internal_static_lab4_snakes_GameMessage_descriptor.getNestedTypes().get(0);
    internal_static_lab4_snakes_GameMessage_PingMsg_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GameMessage_PingMsg_descriptor,
        new java.lang.String[] { });
    internal_static_lab4_snakes_GameMessage_SteerMsg_descriptor =
      internal_static_lab4_snakes_GameMessage_descriptor.getNestedTypes().get(1);
    internal_static_lab4_snakes_GameMessage_SteerMsg_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GameMessage_SteerMsg_descriptor,
        new java.lang.String[] { "Direction", });
    internal_static_lab4_snakes_GameMessage_AckMsg_descriptor =
      internal_static_lab4_snakes_GameMessage_descriptor.getNestedTypes().get(2);
    internal_static_lab4_snakes_GameMessage_AckMsg_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GameMessage_AckMsg_descriptor,
        new java.lang.String[] { });
    internal_static_lab4_snakes_GameMessage_StateMsg_descriptor =
      internal_static_lab4_snakes_GameMessage_descriptor.getNestedTypes().get(3);
    internal_static_lab4_snakes_GameMessage_StateMsg_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GameMessage_StateMsg_descriptor,
        new java.lang.String[] { "State", });
    internal_static_lab4_snakes_GameMessage_AnnouncementMsg_descriptor =
      internal_static_lab4_snakes_GameMessage_descriptor.getNestedTypes().get(4);
    internal_static_lab4_snakes_GameMessage_AnnouncementMsg_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GameMessage_AnnouncementMsg_descriptor,
        new java.lang.String[] { "Players", "Config", "CanJoin", });
    internal_static_lab4_snakes_GameMessage_JoinMsg_descriptor =
      internal_static_lab4_snakes_GameMessage_descriptor.getNestedTypes().get(5);
    internal_static_lab4_snakes_GameMessage_JoinMsg_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GameMessage_JoinMsg_descriptor,
        new java.lang.String[] { "PlayerType", "OnlyView", "Name", });
    internal_static_lab4_snakes_GameMessage_ErrorMsg_descriptor =
      internal_static_lab4_snakes_GameMessage_descriptor.getNestedTypes().get(6);
    internal_static_lab4_snakes_GameMessage_ErrorMsg_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GameMessage_ErrorMsg_descriptor,
        new java.lang.String[] { "ErrorMessage", });
    internal_static_lab4_snakes_GameMessage_RoleChangeMsg_descriptor =
      internal_static_lab4_snakes_GameMessage_descriptor.getNestedTypes().get(7);
    internal_static_lab4_snakes_GameMessage_RoleChangeMsg_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_lab4_snakes_GameMessage_RoleChangeMsg_descriptor,
        new java.lang.String[] { "SenderRole", "ReceiverRole", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
